(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    208292,       4063]
NotebookOptionsPosition[    204409,       3949]
NotebookOutlinePosition[    204829,       3965]
CellTagsIndexPosition[    204786,       3962]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Developing tools for maximization", "Title"],
 "\n\n"
}], "Subtitle",
 CellChangeTimes->{{3.5635737952712727`*^9, 3.5635738140273447`*^9}, {
   3.56806632902525*^9, 3.5680663383228664`*^9}, {3.5685527886763573`*^9, 
   3.5685528098555684`*^9}, {3.568552840546324*^9, 3.568552877313427*^9}, {
   3.6175276363449244`*^9, 3.6175276471945453`*^9}, {3.6315307121168175`*^9, 
   3.6315307410951223`*^9}, 3.6340575127209635`*^9},
 TextAlignment->Center],

Cell[TextData[{
 StyleBox["General instructions: \n\n",
  FontWeight->"Bold"],
 "1. To evaluate ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code, get the cursor in the cell containing the code and his Shift+Enter.\n\
\n2. Each occurrence of  ## corresponds to a problem. The problems are \
rewritten at the end of the notebook in a section entitled: Problems.  That \
section should be copied into a new ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook. Your answers will be put in the new notebook.\n\n3. Do not write \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code and text in the same cell. In the cells where you are writing text, \
you need to format the cell for text. You can use the Format/Style/Text from \
the bar above, or Alt+7 to format it for text. You don\[CloseCurlyQuote]t \
need to format it for code.\n\n4. This will be due on Friday, March 11. \
Please put a .pdf copy of your solutions on Canvas."
}], "Text",
 CellChangeTimes->{{3.568119044666044*^9, 3.5681191099520445`*^9}, {
   3.568121213436041*^9, 3.568121243394041*^9}, {3.5721904558943844`*^9, 
   3.572190462508763*^9}, {3.617527291464198*^9, 3.617527327964286*^9}, {
   3.6175277851244345`*^9, 3.6175278240046577`*^9}, {3.6175278623528514`*^9, 
   3.617527868134182*^9}, {3.6176184455926247`*^9, 3.6176184752433205`*^9}, {
   3.62056641469038*^9, 3.620566457026613*^9}, {3.6294666025891714`*^9, 
   3.6294666074926014`*^9}, {3.6340575329131184`*^9, 
   3.6340577073930984`*^9}, {3.634057752566682*^9, 3.6340577544767914`*^9}, 
   3.634062163871725*^9, {3.634073946317506*^9, 3.6340739553811216`*^9}, {
   3.6493239788476934`*^9, 3.6493239835219603`*^9}, {3.6616853393411713`*^9, 
   3.661685343428136*^9}}],

Cell[CellGroupData[{

Cell["Analytical tools", "Section",
 CellChangeTimes->{{3.6315306941598434`*^9, 3.6315307024319777`*^9}},
 TextAlignment->Center],

Cell[TextData[{
 "We begin by developing an understanding of the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " commands that will help us solve equations. We will look at two commands: \
Solve and NSolve. Let\[CloseCurlyQuote]s start with a simple example. Get the \
cursor into the cell below and hit Shift+Enter. This will evaluate the code."
}], "Text",
 CellChangeTimes->{{3.6315308172253685`*^9, 3.631530890534234*^9}, {
   3.6315309390423737`*^9, 3.6315309541925325`*^9}, {3.631531167551592*^9, 
   3.631531186629937*^9}, {3.6315313104395432`*^9, 3.6315313177014656`*^9}, {
   3.6340608934023275`*^9, 3.634060896379498*^9}, 3.634062168021332*^9, {
   3.634375416305888*^9, 3.6343754202990017`*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"2", "x"}], "\[Equal]", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.6315309626977262`*^9, 3.63153099263661*^9}, {
  3.6315310667420745`*^9, 3.6315311159935265`*^9}, {3.631532125842809*^9, 
  3.6315321394703417`*^9}}],

Cell[TextData[{
 StyleBox["Let\[CloseCurlyQuote]s take a look at that little bit of code and \
the output that ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" gave us. Here are some things to notice:\n\n1. ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" distinguishes between lower case and capital letters. Commands \
which are built into ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" always begin with capitals. So, when I make my own commands, I \
always define it with a lower case letter so as not to have it confused with \
something ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" already knows.\n\n2. Solve solves equations. That\
\[CloseCurlyQuote]s probably why they named it that.\n\n3. ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" is telling us that the answer is ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox[
   FractionBox["7", "2"], TraditionalForm]],
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" a little bit differently than we are used to, by using an arrow \
instead of an =.\n\n4. To  describe the equation I wanted solved, I need to \
use two equal signs in it. One equal sign is used to define things; two equal \
signs are used as the relation of equivalence. \n\n## In new cells, \
experiment with this by typing and evaluating the following:\n\n        A. \
Solve[2x=7]\n        B. a=9; Solve[2x==a] (that\[CloseCurlyQuote]s a \
semicolon in there)\n        C. a=9 [Return] Solve[2x==a] (the carriage \
return is not Shift+Return).\n        \nSum up what you have deduced about \
semi-colons, the Solve command, and use of equal signs. In particular, what\
\[CloseCurlyQuote]s going on in the second bit of code?\n\n## In new cells, \
experiment with this by typing and evaluating the following:\n\n      C. \
Solve [3x==y]\n      D. Solve[3x==y,{x}].\n\nSum up what you have deduced \
about the Solve command and solving for particular variables.",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.6315310234047594`*^9, 3.631531060939015*^9}, {
   3.631531121304241*^9, 3.6315311573504558`*^9}, {3.631531193020407*^9, 
   3.631531202677162*^9}, {3.631531241265155*^9, 3.6315317604548035`*^9}, {
   3.6315317937433805`*^9, 3.6315318586537037`*^9}, {3.6315318995496397`*^9, 
   3.6315319000622025`*^9}, {3.631533266920703*^9, 3.631533314318858*^9}, {
   3.6337815433001404`*^9, 3.633781556061692*^9}, {3.6338643656680975`*^9, 
   3.633864499129098*^9}, {3.6515699503959093`*^9, 3.6515699627167864`*^9}, 
   3.661682733489075*^9}],

Cell["\<\
We now introduce a related command, NSolve. Again, evaluate the following \
code:\
\>", "Text",
 CellChangeTimes->{{3.6315320513053875`*^9, 3.6315320846159706`*^9}}],

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   RowBox[{"2", "x"}], "\[Equal]", "7"}], "]"}]], "Input",
 CellChangeTimes->{{3.6315320992972403`*^9, 3.6315321208873425`*^9}}],

Cell["\<\
One easy distinction that we can make between the two commands is to say that \
NSolve solves things in decimals. To verify this, evaluate the two following \
commands:\
\>", "Text",
 CellChangeTimes->{{3.631532170137794*^9, 3.6315322545568457`*^9}}],

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], "==", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.6315322584605765`*^9, 3.6315322925734386`*^9}}],

Cell[BoxData[
 RowBox[{"NSolve", "[", 
  RowBox[{
   SuperscriptBox["x", "2"], "\[Equal]", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.631532300600054*^9, 3.6315323081653457`*^9}}],

Cell[TextData[{
 "To really appreciate the difference between these two commands, let\
\[CloseCurlyQuote]s try it on a more complicated problem: finding out where a \
parabola meets a circle. The commands will be:\n\n",
 Cell[BoxData[
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "==", 
      RowBox[{
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}], "+", "1"}]}], "&&", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]],
  CellChangeTimes->{{3.631532467518298*^9, 3.6315325652619095`*^9}}],
 "\n\nand \n\n",
 Cell[BoxData[
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "==", 
      RowBox[{
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}], "+", "1"}]}], "&&", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]],
  CellChangeTimes->{{3.631532467518298*^9, 3.6315325652619095`*^9}}]
}], "Text",
 CellChangeTimes->{{3.631532361877952*^9, 3.631532464462466*^9}, 
   3.631532737703312*^9, {3.6340509517374625`*^9, 3.6340509858374624`*^9}}],

Cell[TextData[{
 "Before we evaluate these, here\[CloseCurlyQuote]s a quick comment on the \
code:We want ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to solve two equations in two unknowns. To feed it two equations, we use \
two ampersands \[OpenCurlyDoubleQuote]&&\[CloseCurlyDoubleQuote]. \
Alternatively, we could have written ",
 Cell[BoxData[
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{"And", "[", 
     RowBox[{
      RowBox[{"y", "==", 
       RowBox[{
        RowBox[{"3", 
         SuperscriptBox["x", "2"]}], "+", "1"}]}], ",", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}]}], "]"}],
     ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]],
  CellChangeTimes->{{3.631532467518298*^9, 3.6315325652619095`*^9}}],
 ". \n\nMost people find the \
\[OpenCurlyDoubleQuote]&&\[CloseCurlyDoubleQuote] less confusing.\n\n"
}], "Text",
 CellChangeTimes->{{3.6315327852408686`*^9, 3.6315329197902837`*^9}, {
  3.6315330135439434`*^9, 3.631533061205558*^9}, {3.631533344490964*^9, 
  3.6315333446180525`*^9}},
 FontColor->RGBColor[0, 0, 1]],

Cell[TextData[{
 "Now put each of these commands in its own cell (you can cut-and-paste) and \
evaluate the code and see what you think. Here are the commands again.\n\n",
 Cell[BoxData[
  RowBox[{"NSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "==", 
      RowBox[{
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}], "+", "1"}]}], "&&", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]],
  CellChangeTimes->{{3.631532467518298*^9, 3.6315325652619095`*^9}}],
 "\n\nand \n\n",
 Cell[BoxData[
  RowBox[{"Solve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"y", "==", 
      RowBox[{
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}], "+", "1"}]}], "&&", 
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}]],
  CellChangeTimes->{{3.631532467518298*^9, 3.6315325652619095`*^9}}],
 "\n"
}], "Text",
 CellChangeTimes->{{3.6315330883798113`*^9, 3.6315331118462267`*^9}, {
  3.6340579550192614`*^9, 3.634057994115498*^9}, {3.634058028921489*^9, 
  3.6340580332577367`*^9}}],

Cell["\<\
## What are the pros and cons of using NSolve instead of Solve?\
\>", "Text",
 CellChangeTimes->{{3.6315331719983034`*^9, 3.6315331949223394`*^9}, {
  3.6616828041062007`*^9, 3.661682818769355*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Graphical tools", "Section",
 CellChangeTimes->{{3.631530769875617*^9, 3.6315307754482965`*^9}},
 TextAlignment->Center],

Cell[TextData[{
 "We are going to rely heavily on the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " command: ContourPlot. We will be using this command in two different ways. \
The first is to draw a curve in the plane that is the graph of some equation. \
Let\[CloseCurlyQuote]s start with an example that we will thoroughly dissect:"
}], "Text",
 CellChangeTimes->{
  3.6175273316965*^9, 3.629466627038274*^9, {3.631533363218064*^9, 
   3.631533364048645*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"9", 
      RowBox[{"x", "^", "2"}]}], "+", 
     RowBox[{"4", 
      RowBox[{"y", "^", "2"}]}]}], "==", "36"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.568119113187044*^9, 3.5681191895270443`*^9}, {
  3.572190561729438*^9, 3.5721905801784935`*^9}, {3.631533609967258*^9, 
  3.631533613460353*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
8nD/loqXIzl+/fvh/wBZeX4h
   "], {{}, {}, 
    TagBox[
     TooltipBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 
        87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 
        103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 
        117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 
        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 
        145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 
        159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 
        173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 
        187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 
        201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 
        215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227}]},
      RowBox[{
        RowBox[{
          RowBox[{"9", " ", 
            SuperscriptBox["x", "2"]}], "+", 
          RowBox[{"4", " ", 
            SuperscriptBox["y", "2"]}]}], "\[Equal]", "36"}]],
     Annotation[#, 9 $CellContext`x^2 + 4 $CellContext`y^2 == 36, 
      "Tooltip"]& ]}],
  AspectRatio->1,
  Axes->True,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{-4, 4}, {-4, 4}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6340492273254623`*^9, 3.634057415122381*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["It drew an ellipse for us - the graph of the equation ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"9", 
      SuperscriptBox["x", "2"]}], "+", 
     RowBox[{"4", 
      SuperscriptBox["y", "2"]}]}], "=", "36"}], TraditionalForm]],
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[". You should look up ContourPlot in the documentation center. Here \
are some additional comments worth noting:\n\t1. Again, note the use of the \
double equal signs == to define a relation. Using one equal sign doesn\
\[CloseCurlyQuote]t work here.\n\t2.  I specifically described the ranges for \
x and y. Notice how that is done.\n\t3. There are ornamentations to the \
graphics that I can add. I chose to add the x and y axes. Try putting in \
False and compare.",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.5681192134950447`*^9, 3.5681194587360444`*^9}, {
  3.5721904886542587`*^9, 3.5721905458955326`*^9}, {3.631533386484249*^9, 
  3.631533390662754*^9}}],

Cell[TextData[{
 StyleBox["## Play around with it:",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" use ContourPlot to draw a parabola, a hyperbola, a line, a cubic, \
some with and some without axes. \n",
  FontWeight->"Plain",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.6340583046512594`*^9, 3.6340583091855187`*^9}, {
  3.634076022830553*^9, 3.63407602674616*^9}}],

Cell[TextData[{
 "We will want to look at several graphs at once. To do this, we will use the \
Show command. ",
 StyleBox["It combines a bunch of graphics into one picture. ",
  FontColor->GrayLevel[0]],
 "As an example, here are plots of the two equations we solved above:"
}], "Text",
 CellChangeTimes->{{3.6315340227072916`*^9, 3.6315340750080986`*^9}, 
   3.6315341825638237`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "12"}], "}"}], ",", 
     RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}], ",", 
   RowBox[{"ContourPlot", "[", 
    RowBox[{
     RowBox[{"y", "==", 
      RowBox[{
       RowBox[{"3", 
        SuperscriptBox["x", "2"]}], "+", "1"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "12"}], "}"}], ",", 
     RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631533874040453*^9, 3.63153387831487*^9}, {
  3.6315339288632765`*^9, 3.6315339667555656`*^9}}],

Cell[BoxData[
 GraphicsBox[{GraphicsComplexBox[CompressedData["
1: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
    "], {{}, {}, 
     TagBox[
      TooltipBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
         69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 
         86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 
         102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
          116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 
         129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
          143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 
         156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
          170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 
         183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
          197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 
         210, 211, 212, 213, 214, 215, 216, 217, 218, 219}]},
       RowBox[{
         RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                RowBox[{"-", "1"}], "+", "x"}], ")"}], "2"], "+", 
           SuperscriptBox[
            RowBox[{"(", 
              RowBox[{
                RowBox[{"-", "7"}], "+", "y"}], ")"}], "2"]}], "\[Equal]", 
         "10"}]],
      Annotation[#, (-1 + $CellContext`x)^2 + (-7 + $CellContext`y)^2 == 10, 
       "Tooltip"]& ]}], GraphicsComplexBox[CompressedData["
1:eJw1VwdUVNcWpYnyqQ7FitLBCEsjahDLOZoVonw1aCSC4sdGPqKoGMwXYln2
GAsaFb4aCypRbAsQrMi1oX5biKDYBxCVIjAzwDAF8L+597y3jmtYvvtuOfvc
ffb2nLtkapyFmZmZWvpn+h0OgVOtD3UyM/4E4Lk/VBPXrO9ktwf6hmW+8MeQ
rBS1v6KT9e/5IjNnmD+uHZKU9YtlJ5vwu48U/vi6YNnN4I4OFhk99vKcHv64
5NWFxFcXOtg5x+2tmbl+6F++P2bhsg42O271Xn2kH25/Fi9FB+OfT/DD6bbx
/t4xHWz7rN5dvEL8cODjMyHnq9pZ1L5Y6QtfPFd/RYp2xqdN9EVpcNCRg+1s
cn4MM4b44qDiIhfj1HYW8QiHWT71wW9aG1YEeLYzH7FB1IZGBLsrjcze9nDK
0xE+GFxYohp3y8jGm3t1+dXFB6PT46QwskS+gDfeKOuj9BtkZG2r/7tLOc0b
f8vtuTW3p5HtDh4hhTe2Oh3ZlP7QwPh2XnmhccW4tr17DCz5yTDrxHQvjD8e
lnA8zMDmzxv+47zhXmg51slqrJOBfeaPJw5zX+DYxaBnzb6lqYZyTxyfkTwh
I1nPQvgCnhjF96Nn4/n2PXHJjTT/5Fg9S0pZ2rS5lyeG8//Xs+HPNt8xlHjg
HwWLTzhf0zHN6AMR22I8cOb9rJj7WTq2iyfAA1Va30dnd+vY0n/bXNUHeeCy
0cOOVrvq2Kag5U8bsT/qo+1z79a0sQJ+nn74Xc3IwMPZbawtyGrb1En9cEKx
UVqijQUoz9sU33PHm4Ptbg22a6P9uWPMoqW5N4q1zOWbKVL0RWXTfi/dVS2b
3ZqTGjW6L8Zy3LXsJU9YHzTOvhJxwVHL6s6+laI3lj92U1w438rStt8Lm+/d
GwdkLJOilS3iePTC/ZFWqlPRreyG2yIpeuFfZ383Tz7dwphvhWKpTU9MDM8f
8PefLZTfHhgaPjnt8LEWlrFGL0UP9ON10MJ0mbljhj7rgZevtG9a96aZGUfM
sW/a5oZ7wi/tDr/UTPXohieqwobdWdPMvN5uWxFc5Yp9noAUzVR/rqh+sSY1
37WZPR8SXW3m6YrHou8ejb6roXpzwZy/FtXOitCwjJHzG3dedsYvKidLoaH6
csYBeovFHyZpWMHAKVcVBc64h3+oYY1fz1sVf8YZk/relUJN9aXABfv/lELN
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
vbcTZP/7f0HZXOI=
    "], {{}, {}, 
     TagBox[
      TooltipBox[
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
         69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 
         86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 
         102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
          116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 
         129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142,
          143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 
         156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169,
          170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 
         183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196,
          197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 
         210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223,
          224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 
         237, 238, 239, 240, 241}]},
       RowBox[{"y", "\[Equal]", 
         RowBox[{"1", "+", 
           RowBox[{"3", " ", 
             SuperscriptBox["x", "2"]}]}]}]],
      Annotation[#, $CellContext`y == 1 + 3 $CellContext`x^2, "Tooltip"]& ]}]},
  AspectRatio->1,
  Axes->True,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{-3, 5}, {0, 12}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6315338793376875`*^9, {3.6315339468396463`*^9, 3.6315339673840685`*^9}, 
   3.634049227732463*^9, 3.6340574155254045`*^9}]
}, Open  ]],

Cell[TextData[{
 "## Here, the circle doesn\[CloseCurlyQuote]t look so circular. Read the \
ContourPlot commands carefully and see if you can see what\[CloseCurlyQuote]s \
going on. Can you change the bounds on the variables so that the picture \
contains a true circle. Briefly sum up what you think is happening.\n\n## Get \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to draw a picture of a parabola and a line tangent to the parabola at some \
point other that the vertex. If you want to show off, include a (visible) \
point of tangency in your picture. (You may need to look up the command \
\[OpenCurlyDoubleQuote]Point\[CloseCurlyDoubleQuote] in the documentation \
under the Help tab.)\n"
}], "Text",
 CellChangeTimes->{{3.6315342255659037`*^9, 3.631534324668227*^9}, {
  3.631535309973033*^9, 3.6315353103082676`*^9}, {3.6340495301174626`*^9, 
  3.6340495869294624`*^9}, {3.6340496508854628`*^9, 3.634049744536463*^9}, {
  3.6515700572098417`*^9, 3.65157006034081*^9}}],

Cell["Next, check this out.", "Text",
 CellChangeTimes->{{3.631535336492584*^9, 3.6315353451306267`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"9", 
     RowBox[{"x", "^", "2"}]}], "+", 
    RowBox[{"4", 
     RowBox[{"y", "^", "2"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.631535280572467*^9, 3.631535281266953*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1:eJyFnQm8z8X3/697r7svSIstlNA32klU7ymtUtlaSBKVlJC0UaGStZJsUYmK
skaRtfeUlCVZsu9b9n3N/tdnznM+v/e5j/v4cx+P9+P1mXnPe5Yz55w558xM
2WZt6j2TmJCQcHuhhIT/nu5fIctz7eQX10x+MdPjKf/BNSke9yt3X99y9yV6
vCGW/1QIHhBLP+Tx4Bje7LF7LpoB7unSA/CH7n2PV7jyPe7jvm/AP7r6ebzS
1d9jeWrs26mftBdMe8G0F0x7wbQ32o+LZoBpL5j2gmkvmPaCaS+Y9qpx0zhP
u8D6SXvBtBdMe8G0N0oni2aAaS+Y9oJpL5j2gmkvmPYqutQ4z7jpdoH1k/aC
aS+Y9kbnwaIZYNoLpr1g2gumvWDaC6a9at5pnIcu9bjpdoH1k/aCaW90ni+a
Aaa9YNoLpr1g2gumvWDaq/iKxnnmnaZLPW66XWD9pL1RPrZoBpj2gmkvmPaC
aS+Y9oJpr+KbGufhK3reabrU46bbBdZP2gumvWDaC6a9YNoLpr1g2qvkgsZ5
+KbmK3reabrU46bbBdbPqDxaNCMqjxbNiMqjRTOi8mjRjKg8WjQjKo+83NM4
j1zQfFPzFT3vNF3qcdPtAusn7QXTXjDtBdNeMO1Vcl3jPHJPywXNNzVf0fNO
06UeN90usH7SXjDtBdNeMO1VeovGeeS6lntaLmi+qfmKnneaLvW46XaB9ZP2
gmkvmPYqvUzjPHqLluta7mm5oPmm5it63mm61OOm2wXWT9oLpr1K79Q4j16m
9RYt17Xc03JB803NV/S803Spx023C6yftFfp1Rrn0Tu1Xqb1Fi3XtdzTckHz
Tc1X9LzTdKnHTbcLrJ+0N791hNaztR6q9TStx2g5r+Wgkgt5+KjmM3oeajrV
46jbqZ+t/8s+OdvypP3gLbH3d4fg4bHvLcmDee8dhwPSwaT/7crz6a3c06jv
G/39Wn3/Kyjdfw9M+WDKB/N++f+y9U3274N5H8z7YN6XtbN/H8z7YN4H8/60
2LgcC3kfzPtg3gfzPk/ez+93ytO/86R80smv0/MbZ+hX1yM6zotm6O+SDn3r
33nyfTD0oetDOvXR7aYc6pNfO6lPfvXQT+qjv6+/p8vX/T7Rja+vD5hywbwH
5v3T52L//Ptg3gfzPpj3L3P07fsVzPtg3gfz/t1ufvn3wbwP5n2wnvfwBTDl
63HX/a7T4Rv5jRPp/K6fmu9QL8Y3+vuiGWDGN7928T78iPfBvA8mP/yH/GDy
g8kPvyE/mPxg8sNfyA8mP5j8mt/odZXmN3odovmEnjd6Paj5i+Yrel7reQdm
XPOTU5Sv+ZLmC3oeazmt28V8pR5g3gOTn/lJfjD5weRnPpIfTH4w+Zl/5AeT
X89P2sX7UbpeNAPM+3oegX+KtTPH8mwXy/9rAJ7snj7fRJce7nYJIfnBpOsn
+ea7fAG/g0nXT/KNi2Xb5n8H63qSH6yf0A96H3Sh14e6vWDy8z7tTo69d8C3
B6z7Baz7T/cX9SQdTPm8DyZd/57fd3S/63GhnaRr+Ux/8Z5+/9/YdNjv3weT
XiZG/0d8usZ63BgX3q/o8vt2gUn/2dGHTwfTH+D8+o102q2xHkfN//IbR56a
P+bX7/mNO/RPOpj39bjo+QIf4KnnOf0drW983UU+vs86i++Def/+GP8q4McP
TD+AKY91GuWBKa92LP8J389gytPpzEfeB5MfrPUIzQf4Xc9rfqe/wTz5rubT
9LumC8YLzPygf1hn0j9gynk+9p0znq7AlAemPNaplAemvFWx8pM8fwVTXhQX
ysOPNZ1F6W/RDD1/4a/0p+Yfmj7RhxgXrYfwHulaL9Hzi+/xu86v+Rvt4Tvr
XH/4+oF5H0z+dm484nxCsKcfwfVi6RODl2L4qE/X/Ayc3ziAtdzX/Uq7oUfe
u9PNL99+MPUBk/8eN789PYHJDyY/+jCY8c1vHYIeRHsZR+aztmt4PU/KR39j
vKFH2g9e4vo/pP/zs8NQH/qX+lBfvQ6iPuTT/BBMOvyNdLDmy/SHpm89/8Gk
M59JB1Oe1gewa9GfL8TKK+jnOe3lfehJ242w54GviPV7lqcDbVciP5j8tFfb
ncgPJj/10etk7HPRdXeWp2Pep9/ApFPvMzHySjV6nflJLD3D59frTtK1fKe/
eY/+5nukazubXsdSvtYTWZ/Qj5TP98HR9V8h/x3dz6TrcSA/+gLp2p+u+Rf1
jcqTRTPof73+o118D/nG98CkM+6kg1V7jWqf72/4AHYAMHwNDF8Dw7c93bt0
z7f0OpAn39VPvg/m+2C+D4YPgqEDMN8Hw7/ya7euh35SHzD1AdMfyEvoEUx9
yE998ut33Q+6HvpJfcD0D5j+AVMfMPXJb9z1OOh+0PXQT+gDTP3A1A9M/bQ8
1d/XdnVtJ9d2Um13zM+ur+3s2s6q7Z7ajqn9AtpOr+202m6q7fjajqvtstrO
qu2mjCflMJ5g6gv2eo0aN7B+Uh8w9QFTHzDjqfmGntdg6qfpWn8XrJ/UB0x9
wNQHTH00X9Ht0uWC9ZPvgfkeWPNNzcdov563ul91u/R3wfpJffLjm3oe6nHU
/ajbqb8Te7yY65/oDVpPgX+SDkZ/1HYQ9D9+B/M+mPzoSaSD0Tv4HnI6uj4q
ZLV8Z/5rOxxyl3o5vSLX8qQf8vudJ98lnXL5LvXju7q/0D9Ipz/qxfDE4Gxs
GJM8PVJfMO1FH0PfAVMPMO+Do37WbHsg9r0NPp36gaPxTb69Xj6hn0X11Xjc
qtY7yB/1i8TjPrVeQP6oXyQeN6nlto4rJB07pOZzGlO+5gukU37Ubh+PI9F8
i/xRu30hj0lnXuq4Zq0v0a/8Dqa/wPSHjqvUegTp/z+5pOUA7QOj92q+Sfm0
T9OF1t91O7R+qON+tZ6o42S13qbjtEhHr9ft1XE/uv2k014dR6L1TR3frPU9
6k17dTvAvKfjYrUeSHp+egXptBdM+3Tcj5Z7pNM+PS91PKzWZ0mnfbodYN4D
U39wfn5xrW/qOB4tV3U8Mu8XiOVP8+sMxlHrr9ovq/2IOg6O96EvXX/t98vP
r6z9wNpvqf2M2o/I+CAvdByN9itrP6j2W2q/pObD9K+O8yFdx+FQH50Opn5g
6qfjCLX+ruPutD5POu0BQy9aruh4Ss1XNd8B0x6wXqdRDun8Dqa+YOqr48y0
3qjjW7VcpN+ov+aTel0L1vOSftLrAsrjPR33p/Vo0qk/mPrqeEfKhd70ekLH
d2q5RrpeJ9Nena7nKfod8wCsx41x0fGeen2j4z71OoffqYeOI9TrAh3/qu1G
Wq6DtVzTdgzGX88bvT6iPOql4zr1Oonf+Y6OX9V2JtrN+Gq7D+lajil907dH
z3s9jzRd6vUZ5dHver1GutIX9frDjxfjxLqNp7aTazu4tqvyHvKN/qQc5N/E
GP7Vp1Mu6ciPj2K/Z/j1FuXjD+OJPwfMe1ov5n1XXI7PDyaddRZ+Wu1X0XZ3
XS/yQ1dRfT7Lf4fyWSdBD9Ad5ZFOfvwzWo6Rn/TY474c+3usPsu9PkX/g2kH
+afH6j3f0yHpfF/7z6C7U+69kPUn5YB5n/GhH+gX0hkP6IZ+pP/JH/1+Vh4/
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
k05/k05/k067KV/HJfM7+bVdlP4Gazsl/atx9HyFQl5eR+VOAT9vtb1K0z1Y
xx3zO+UxP0hnfpDOeJLOeGq/j7ZTUg7jo7GW09rOqrG2YyLP9bqY/tHrTo19
nJH0F+k6Dpt2ab2F/Pk9td+L37XdHzoAQ/c6jgi6xX/j6DzRy1vSsROxHgSz
HovaeRJ9nAU4GocR3+/C/EUvWBLDEz0+Fcs3P4/fnXT0bTD6CBi9Bow+o/1I
2q+j5Szjq+UYepzm42Aflyn0QHlaTmm/CPRAecwXrQfrfarav6XtObpd8DXd
D+D81r3arsN80vu9tF+E/Hxf74fU/UY65bCepX7QJ/lIh+/xO/MPTDr54Qtg
xoP60J86v04Ho19r+5Med+QW7dN+QuhG+xGph9ZbNCa/XqfDH0j35+xIul63
aT8F6y7tJ9D6DuVDD1ofoP30B/oH48s6mPaDaR+YcnXcMXIXHN23keXjFRkn
9BHGF0z70U+Yj2B9rgnth89G/TTxc8a0f0mvg9ATtJ+L9oP1k/qj/4Apn/rq
+D6+p/kSWK9T0F+0nw8+oP1+lJffPANrvZvvMo/5Xesd2g8Mpr1gxoP6gUmH
XkmHfqLnDGR5ua79qNrvSrrWv6gn/E7rM+hR1AtMvvzsnmCtX+l9KJSj5YZe
98G3td0SPqDXgYy/jnPgffg2OOqPTPb6FPOMepI/qscl5xlXnlqv0ucuaL+7
lrPaL6LjvLTcxT5AfaJ2qrx+fV0PbS/X+5egQy1ntJ1V8z34HJh5DtZ0Dh1R
Pv0Ipr7k13Yw7Cj6vAL4Ef2n90vyPvar2M//Jw4RfyDtod8137orlv+gP6fg
AYdDysO+BUZ/dd2YZaN+0SzvpyYemfrrfWA6XqxoLN9Sv36M6uGp/jt6nwv9
Vy+GJ3o8PZZvvtdvo/Ef6b6dpLNe1nE4mm+RzjhovgXf0HxO62mML/MbTLr2
R2s7KPMsluzj4eLxyPQT/lTWH6Tr90knviPaP/H4V9J1fK2+d4x5SHu03crv
C3Hz369b+C70qOI2PJ3TXvpZn9eA3GR+a7uPvpeF+up1PljzdX3vh/bvkk5/
gylX6+P+PFfpD31PjObzeh1Nfr4Hpn+03w29SvvltN3Jn1Mq9dJ+C+zI7r3T
Xt/T+nC0vBSfn/7TcTP6/jPtb0I/1XYj7ReivmDqA6b/9L070bjKLM8n+T76
Dd/Tdin4LN8H830w3wdrvgPdUC7jFd1/nip8/WSg+yk/u5PeR631P73/XdtJ
SKc+9Bv0rOlGn9vA+/Qz32ccwPBB8sMnSafftJ1I+/M1X9Z+T9KZF+hN0CFY
7+Oiv7XfVPsVKZ9x1PvZtZ6KnsB4absf5fNdsPbL0X4w46XvK+J72q8A9nJX
xlPvs6R8HSdLf4H1vkMdJ8h4arsM7WA+ajkAnWo7i44biJ5XkOXHn/bkt+7W
8RaUx/jyPuOr1z06bhz7Hnof/A+s43wmOn0nz74g5v8Sp//kuaeHcvQ5W7yv
71GhvlofIj/1idoXU9Q+n1Rvb9T3BOlzzPW5k/oeF30ON/XR5wgzHvBp6EPZ
9b1+3Ff0HrDeLw527+VY4s6gb+qJ39aNb4Knf+YT6Y4/pXt9Gr2Meuh9EWBX
v/gzv30O4HtdPkN+yqc/9L4L8vEeT+L0SCeOj/exD1M+403/gakf8xz9P3qO
QbZhvUB+yqe9lMf7YOznxJOC4advx/Kv8/54+AHf1+cOsD6gPqwnoD/2deh9
yvjfdRyvtpMjp8BRO3xiHju5toNruw/t1OdLaXsr6cxf7e/U/kww/FDHe2Ov
gz/qc7L1OdrwD+aj3gerz8HW+yl4n/Zpe6Hmb+1cfn8uF+NHfUgHw0/0uev6
3H7vv5Z0fW4j5SHnPP8WOeHvaRCs/Zo89fmi2r6o9TrtP9T2LH0+kY5r1efL
5GfnYz7CP5ivYMU/THQfflzeoceA6WfmNf4z5gc46seK3wsLVvzK8zXNT6kv
9WO9CN8nvge6ApOu5Rb6YNSukeTpBkw64wT/jMrPbHt7LGFTQH1ZB5Ef/qP0
G78ORs/V60DtF1L6jOcD6F3Qs4670HRJ/vz8zjpOTe/b0nEn+cVdwof0Ple9
71ef16j3vem4DzDtY3y1H4n2kp/2gZk30XMW08QucdLXA75Ee3WcB9jfqyLj
BKZf4Bfk5/v6nnPNz3VcS35xpDquEj1Kv6/P7QJTH7C+R0bfc0K6PvdLx3+z
TtDnAulzGylPyzXwqVj9joueedjzIb3/Wp9Px/vUh3QdF4Ve6PKfFj5a0GMd
98D3qAf2sB9iv5/16199Dpjet8b6inkGzs8Pm18cVnQ9Ez/XD5xf3E1+cbW0
KxpnniD2ytQ861ra7/Kl+XFBHkEfOo4lv7hXHXcPfaBX0l5tv4fukSdg1jun
Ys/5fj0Gn4dvok+y3mCdwu/0A5j1AvmRu/ocYzD8NbpuiZ/Xpe/BIP90V+88
54bAX+lv+Cvjn58ezfvMQ3+Pj/Av3geTDt3RHr2vlnFDv8deTXvBE0VP1Pv4
eX9JDE/0+Rk3MP2jz0Hi/XrufR/PQ/+B8zvHjffRX8gPnYDJN1n0Kn5HXwFD
f9gVSGdco/GwWerc7fh5XtAn6fQv+WgvOHrvR9zfo/0V0Dd0G92XFT//Cv9P
tVj+Vd4fhN4Ef43qkSmK7lPVeVOpfh7oc1/0uTDkp51gxpX1IO2BzqPnpaT7
dSBYxyeQDl+L7odIUXSS6ukEDJ0wf9BHtBzScZd6X0LUvpWcZ9+H3gejzzmh
XOQ5/iD8guDoPqv4fUx1Y3iTX4/7eBkZD33vDu1nfMCMT/R8BPTbFKnfrhCc
Gkvf4ekDuwz0ACa/a88ej8NYvn2h0oPy3POj93EyPuRHz9Dn4PM+/az3fSKn
KR97Q37npkTvG0mzSbHf//V2WugAfwz6Kfwj2k78R4d9uvaPRP12mardWb7d
0E/0vLIUFfeYotYVqRZ9CT1HP6P3WCQY9KX8zlmJno9b0OdnPKB/xgM7UH58
F75MveHfep82/DLKX+IYukdPgu5Z/4K1XYT8yDfyg9V+Rm+3p56MJ3qPjg9j
PpOu77+DTpmPUTkSv7dKnzNK+/W5o5QPpvy+rnzP7/0+Quk3+C/9xLwCk05/
k675PfRIOpjvRe+/S/f1IT+YdOQR6WDarc+hZB5F+VT8HMT89tmSH/6Q375b
6IX8+HFJz++cPPIzH5hX+pwSfS6D3k/i7XBuvvh1Ifq3Xofrcyt0fD/zjn7H
XqPjFKP7lxJVnGJinnMCyM/8Jj+Y71FP5Jujk7h9SPtNkLPIdeoLvev7Dvku
/AM5wHwAsy7iO6wj+A79Fd2PFo83OuXmge8PMP3HPCEdrM89cfM+fl4RfIj2
gPW5kOgLzFf4DZjyovM5jtEfaR/yhXGKyrFcb7+JysNEtS4s4OUj+gfxC5SP
/x29UPuvdXym599OTue570f7S8F634qOs9TnrKBHwg/0uXPUn3FmHab1Dvid
vodd32tJ+VF/X4qi8wRPHz4eW/i3vgfe76uRdOwkyB3oIboeyLbsw2R+IIdi
8P+cQ4H8hJ7JD59Dvmt/lj7Xjv6Db4Nd/TL9+Wnkh//rdTv58TeSn/4jf3T+
Zlri58jPvNTrfPJzPpuOM9TnIrNuodz84tTAUf9YXB7Rv2D4J+ON/ABHzzlI
9vIDvqnj9b2fSeaDtmvCT9FrkWvoyWDy0y7yMy/JD9brMG2X1fuYouuVQnnO
SYneS52lzolJtDqOPnofWLKPz8TfoPU0rceRH75LveCP1Iv5wnwAM6/077yn
y6E/oS99rgH10/Z+vc6B3nhfxxnqfbvR+3XSvT3e32Mv+fne/08vgc4YV9L1
vj/WFaxf4PP5xQExbuTX+0p1XFvUPpqQbxw/6z7qE5VjR/LEwYEpHz0C/ohe
pPV48pMPrO9N1nqwjtPVejnp8B99zhjjgjyAr0PXyA/kCv2DHsI6MKqXJHu9
g3Swjr+nXOQd+eADWo/V93VRfzDjwvqX+7B1XBp8NRp/mej1FcaddMpHX8lv
30Q0rr2At9NTnqar6H7WFJ9fn3OozxmOrquy85wjp/ks+dGXoUPmDVjr+9AB
WO/jgd8zPtCV3ofMPED+g/V9jlqPByP/4It8R9vbo/Gv8XN19Tm7yNEoXWZ5
DF9GX0AOgJE/6A/6XmA3LgX9+oJxAUOf2JegF/gM9ABGb9TnKTG/+K4+34p6
kZ/xpz/hN/AjsF+nuO97OmE+QCdg6kf52u8YpdeCee7R5H0w9UXuR89BL+Tp
NxqfUND/DtbrVOQTdKfjssDUl/6AHuCrYPgu/i3oQZ97zzqK9ry06te3R/ZM
9fH8Sx54/eDc5+Lx/Zmzrs2ade1pr+ciX5q2bvT6/L9y7QfFz1ad/e1B3x8p
i1fsS382fo8D866Z5O/WZsCRmjmZ3s+x6f5ZzbdcFD+/mt+feCS9wZEBGTbp
6X92JTSMx+9f2GTT+b+88fvPSv5iq6fsKr0o16ev/jK4vubkVB8vcGp+ePr8
n7e3JDx2VdOxnf/x+LOaSzo/eGNmnvsMq71X8/xfiq9f9Qu/yHioawH71Kz2
ndc9GY/PL9ug6eUNmh72fnvqd6/kf3tQ2zH1GubmiY9/8bI+L1zW53B41aOp
c+Yti+sJ92399PCHd6Z4PH9Oo/blt6b49d3jvQY26jUw0eOkjn8stetP+Hn6
+11zn0t+K34+28UPtT649aJUL+8en7G00YyliR73aTNvz5YhJ72crbj8qx73
fhc/z43vQ6d8359nLN8H8/1onE+K/XbauN3Txm0JKkl79X10j0536bTf05H0
t78PQ/pbx7s/4/ozoL9JXyP0gJw8J/QApp/3vzax0fpLzgTFhT5Ipx6nJP1z
oRfSGU+hFz/Opb5Zl3Zvy3hcxYBWc8//Jfp+2Vuq/vmhS/T1LCf5Cwr90y8X
C/2Diwu9g1+W+QzdLZP5DL5A5jO4ssxXcA+Zn2DqXynn8V2j1mX6+l+x+eIy
P7TN9HSxN+dImxH3xO0X5SW9t+MPflxo33VS3quJt1Vd/0CqHXz/okYVNmba
vbXm1Wh9LNFWWbfvvYQSWbbki2mTjiw7FZ4sXGPOsmGZtvGd3cbOr7s5/PO2
W4dvbJNpl983a/dXVTcHPSrnFny0XaatOKXryVXTM0zvSQ/P+KR0lv1kXMUz
rTpl2TbPDFh5+d5Ue3zPvuk77zgS7qg77v46K1Pt55u+eL7FlFxTovcttVMu
T7Wjaw7JHPJmqu12Mm173V2J9uLPOg6fVyXJP3+/YNmX8+44Hab+fbr9uB8S
7d4Pl5+q1HtLWLHTmDHbPk20Red8W+rO4pnmsQty6gz8LNGO3L3t3+I3ZNlX
yzS9qNO/p8Oaff7qcvLgofCDyw7P633R6fC3984+VOaaXPPw2LY1Xs09ExZq
8GSRL74vYPrPLtn3ug6Hw3YnU/o+WCbFlMg8tKZZeDhcuqjXVV22pNiMCRnP
tGu5ObzgytvOXvNxoh1QtdQd9VpuCU9/eqDFr0NPBA82qflG9j//hIM/3P/K
l89mmL6zb6/49jPbwgvWH59T++JU2+Tqajk99n8eTv738L/ZKxLtG+81WlZp
5oQw/fTewznDTgZXNjq+/3S/78JRxa7v8NzIDFNoxMsV/pw7JRy+7McZWf+k
2C3vbenw7WWbg3MHtyY3GJ5o1+1b9cezWzcG7c4e7PJxqZNBlxZf/fxD3Q1B
VuGTtarsKmDePzMq6e5eB4Ner3z1UP9GKebWG1fNevmeg8HC5lVvaPdyrnn1
7dW3D2lwMlje+WhavdszzYf7FoVhyUTT/aKtj5ceX8CMefLVzs/dnmIWV5hy
w0NXx59jE35bM2hNrnmq9dC+KT+lmPq5Cc2HX5Xpn5+NLJZ9b+/D4Zs/D7yj
dZNcM95kTzTZh4JCOZtzz//5+fpm0rzf+u/Ltvu+mDvx94bZ5oB72huLlpv9
VKN94RdX9k2auSHd/s/h4EvBtzxR5OEmU/eGg65suX5n3wR7o8PBYMF/lLrn
kfWzs23rm+Yvr/HLkvD1xe+/suf3bFu//dz6n81ZHDZe+/eG32ZnmysqXXd5
W7sk/Obg8QcWnk//s53p03Xu4kDS7bGrYumBvG8ud+8H+6Wee6Xe+9STedfR
tc/8eGL39bcPicepf/jSbQPXXRLvhw8c9nJP8sf3oQjm/QEFCvS8bRH3Ziya
8fHgMrc9emhiUPvOYc9PPplkCg+J4RDM9ynvbNfH6hYvPTc8NKbJTRetSbLD
ovlt2SGR8uwFrR/9e1GrbHN3q913buq/J8zu0bzFoQ7Z5rkXy/xa5O1d4ffd
zjS6/ttsz6fQeyo//dZzY3LXhWkdaxee3DHb3lzlt5Zlu+wKpDxbR8pjXVO5
ucuf6vKb2yX/wNVXzDn5YrapMG3CSzd/vCdYXTt5/iPfxs+PO/puiTZPLlkb
3nTm+JyytyeZJWse21tnxerw1RKjS+1qFD8vefmqi+uO/SHJNG27YsbWbzPs
4wvnLKk5eErQe+LKV+t+k2FPJt2x5lDmnKDx7XWeLdsiw/Y++fOzHZpvC+Ze
Nibc/VSGff/ZFq163rY9+Kpzi6IHemfY5wc23VOk97rwhdFHS1/RP8Ne1Tm9
9cTsVd4e0uDUsq4/PhY/f+4RwT4ec8jaB/aVj583N12wX/84bFS6UeUbVb7p
WObrCReOS7dDW1Zd3sTk2ItWv/Ngs2EFbZNWIwcemZ1jKyV9mlk1s4AdtP6h
Nwr/mmPvnj2kdlrN4+GNqQOnfLsr297ucFBVcAdXnhku5W14vvPoAuNy7PSy
+96fUiLDdhxVs1iPamm2WIeCbwwplGHX1Hr+qu/GJttzn5x+6FCQbivXSS/8
7s5kW7PX2MaPLUizP73bddefF58L2y7a9PfoQen2T4eDZoKHlbyhpF17Lvj8
PzIskm5XufJMgX6uvLfd90wR+d7Wd8sM/N+CNLPDPe1GVz8zU+p3Jvf1d4cP
zrYDiy7OeWdcsh19rlHTxZdm2G6T59To3rugvWLEV7+17/dv+Pgzr47+s3VB
m7vivqSRS1cH/1RvubFfoyTym16S/6wrz/ST8p5cWbHmjefpsdjdySeHvZts
Gz434/h3X+fYvb0L9vxrb4Idd0PDH14rm2a/aDK/f/GkAvbZcR0Xdnsx2f46
+KKHfymXYLv9seXg67ecDU3JnG6zNiXYjxwObhb8x9EJ7b9sfC5Y6J5hC/e+
mSnvz9wxo9vZzsmmevDw78+vOxeOd98zn8r3NjS67PhPA9JMlY9PPX7/1rOh
1M/sk/o90a3fgt++yLLrLixzfHDmibDOhWeqTeuQbv94ufeAmd2Ohz1Wfvbu
l1+n2xqbdt1ed83R8NbyS3df+WFBu73Ck3dd8/e/4Y3PbR/Y41CCvfS2Uds6
23/Dzz6/cubZzUfClbd+8P3a8+lfOxzMETy42bY99spjwXD3DG9w75ty8v4t
rnyzV8qX+pi/pD5SX7NC6vtD2Rv6dT+UZe47+XfSnHpHw+5b+57/+zfs/PXa
t79euy/s5nDwgeDJLb+bPaJchhlRtMuCtNb7w56Sv71LD3505dnbXHlBT2n/
9a79QV3pH+vqE9wm/bHJ1TeoIv1xiWtPMFTaOVDa/Zl6jpb+mer6J+jtvmcq
yPdo3x1SnybS/j9d+4NGQm+73HiajW687ZVuvIPQ0Ye92tFHsEDoaLbQ1Tz1
HCD0d52jP/Oz0NeN8n5Lob+fHP3xPXONfG+C0N8njv7MU25+2Avd/DBjZP69
5+YT6eZiSS9QyM2vD9z8MpuE30x189lsk3m+Web9dcJfajj+YtYK/znt+I/5
1vGTcJDjJ+Zr4S+DBW8S/tPA8R9TxZVnbpDy/pHv8HxH+E+G4z/mTeG3Xzj+
aO4VfnqD458m+9UmtRc2zfXPkQUv2Va4dq7JfW7Wosc/yjXFur08a+qmteGK
063erhok2fKO/4Rbhf98+34sPVjn0k0F4U+STnm2sCvPUn6hKCZdy0NvP05d
curlsROT7PiPzqw8/+ftr35focjP+iXKVq87aUIwObztmadOJZnfyv2ecGRq
tvfTb5497P09U+P+ReTtGidvQ+Rt9eSYvA2Rp7WcPA2Qp5lOngb760+6uu6o
+HlrDxxLv/GTt+Lnrd390PDCH14ZP98BfeLR9/vtX/Velr36tqrVq02N7/cg
HmVp8OVHFWvmenvyqssnr758cpZ9euuBKTffneLLwS7R/HiJZ46XyLYfPfnH
+C0r4vvWXLn+/ma//8LZzXK9nWJS7DuZ9ionf80Qkb/nIv7bQvZCJ6/NUyKv
KyxofF+rJf6+Zh93vkHq29zVN895bWulfehjjaU/pnz/bvsHUuLntfX77ZnL
v/0iPc95EGPbtzGfTkmzv12wvUTLWw7m2R+yauRbq0e+lWLLOvkZNBH5KeX7
8yEOftn7nmOb4uez1Wo27fJa98f3k5QYMeaLT9eneD9lsdqj7kn5JNFj+u/d
v5p2/atpkn3yTbPmobXx/SWCA/W+j8uU8j3ellj/jQqfxfefLLrnnfoblmX6
caPeueep/ZrhJ8Nr/77n1cI3xPefXPTLvPoPdkzwmP56p21at7ZpZ8LFrjy/
L6DmkvpXPJWVnudc6KpS/tkvVlZq+Euu79daQ4/cN/RIuh+H3dedbJg94bj/
juT3cajjr3i30aLK8XvQD/zU/e2vh8fvm5nbZf3+kvcnauz1yNK7hl26a1iK
x5c67PVS6oMdpunnP/d+dORxH5eOHeafqYNHTx28O5gn5fM+5YO/l/ryPu3H
P0j/F3L9E1wv/Y8d42Lpf/Cd0r/6HMyb5P1z0l+UL+MT95sLPdIOZ5c/4OMq
dgi9kM746ntsh86d8cJ1g5NNSaFnf2+tzC/mLXT37PX7G/UuX9AUF3r35yOI
PtrQzSfztNA36RnNL+z98LXH8uwXWefmo69naym/hMwH3ue90VLfUjI/SD8s
89Wf9yD8gn69V/itvre8oeMv5uLoesNUjq43zELhJ5S3yGE/blOFf4DhX09I
+fBnfX7V347fmT7Cn0kX/unX14o/k99/5xnhp2CRH35dT73WyPeQp9OTzgzZ
WTgetzpDsKyXbVNZL7/34pX1qmSker8umPdaOflntndy8q/pmyUeu3ru3uCp
l67asG5Agmn26yNNWzbfF1y5rMmus5vSzYz73xvzzfQsW/qFnVcXnphjto1/
cckFw7Lsa0snP11tVxy/7rC9I/GGvv2bTAsOPHiu22iTZRe8X6zm2tZzgnN3
dP1u7zXxc7Ou/SCxcMnpaXaWjA/9nHr13ZOKT8u2ZS47/MWM+mvCKZ/80uG3
BXH/Mbidw8FThz/cU+s8Hv3VvE4lv58VSLr3L1d5P2KPME2nVG89b/tf4Y5r
/v69yZwkc87ZKwLSc116sFPSVf+bnKRY+8L9rn1mk2tfKO0zanzMQOkP8g+O
9of5x/WfeUP6c8OkZzpcdkn8vnfBXv4re60t2i3yfa/HiP3WJq6recXli7Lt
IwMKfPDTPT3CK4Zm7cr967wc37nnz7XLbCjppnq/WHog6Wb7jlh68LfTx0L0
Mcp3z2SzsNqHW6rllJmJH+/zl0r+8VLJS28F++/3jZRvU9z3g14P7Th4aES2
KdPg3S6/d98cPte+9g3f3pptez7SvtTPjxwMRf/z/twhZWttn1gsw+4uePbh
LU0OBG+/eDq37115z+Ev81r/Zu/s2xUI/ftxEX3RLPorYp8xtzp9MRB7k+/n
Yt1fnlbtu2x714oasz8tsjl8oU79T0oMz7Bdeu2/YFXiQl+fI64+4eNi3/nC
2XdC7Dv9nH0nRL+k/DterbCv/5AMW3JijZfGr13q98G/euyuBrv3xOVCy6h+
6Pni1ij9WPvTkzcuLR+/D13xb68XdYvKU99/Ig/y7EcRfczrWROcvyc8913q
kNW/x/eXyPiZj2T8cq9/sctNX8TvuxL93e8ja3a2zsuffxy/78pmNyxRYNDG
8LIJE868WCDJNOlwdu3q7zJs1XYPj+1b+duge5l/Rgx/I8M2Ljp1a8nMLcHi
/tf8MLRLhv3myfE51Vpsgj/4OHwp38ctQEede/369cyFmXbNgA2VfpsXv99Y
sPfHZjV4e8fK1+L7mmfmlC73StcUW+q9nEmlvt3n4xaun/HM9q/Tcu3UxAh/
sPcVvOhU823DwyIHv+k3/u4sW+zanUtvmbMuKFj+88GpUzNttxJphce0yzCl
TN2vFp3ns4cbfXrv+hZZ9oZ9/655/n9pdmenKqd6bEyxR6tW21jpg2R7We66
AjuWJtpBTc7+2DUl2XYIitcceTzTztk34trSe86GOzYUG9n+/Hj2nfu/7q8+
vTs8snjNK588lWHqXl7+ritv3R5+2fzwugNfZZi5F+6tvfPoH2GnnQPf3jkw
xYz4o+OMPzruCbBfDHD2i6DKqpeK/HVJhvl+wLhzY5oeCHYt+/N/vX7MNet+
uf2pR9sdD8S+FTQWfYL1x2CRx+mOUZijIg/FXmiaivz+4cjSX2s9VNC0bjDz
qbN35GJfNMNkvTv0zIE39q6Kn5si8siUcvLI1lrZb+qgs1mm//NTE6+6PMf+
Ifz8sNifmws/3+74ua074MLCNc6P9/+eaVh4wld/hiJvTCGRN8ifBIcDyW9S
Xf5A6pPn/twa5d6s9XvNeDzeLQ57Po4/gve1//9WeR8+j32f9uvvVZfyfxR5
tk3a93CUX9tlxSPraSv+CLPO+SNCkZ8m9euY/IzLg0EReWEqiLxY3i673fYP
sm1uoS7f3NppeyDYpAh+ftXTnzxQdZWP4yCe7Mk7J/31c/ckc8s7iz+5dmS2
rdtj/YmF3TYH69v0W9emX7ZtHdZ9Nay7LVD+RfwRXu6Ifd6vz1W8ginn/IW2
n/gLu7v5ZYvL/PrW0Zt929Gbbe/8leYz8VfWc34m/6wrfqeHBYv/0bQT/+NR
N1/N1TJfxzj/lX3a+a+s+LX8U/xfVvxfdpTzT5qe4p/c4+a72SfzXcozlCf+
NCv+NLtM/GsfCx7h/JOmg/gnOzr+YKzwB/HP2Tedfy7c6eaz3enmM+nmrWi6
2SHp4v+zXZ3/L4Q/THH8IexVs+SZJ7ekmGMda4/e+9zmsMXBLQeP9sowY0vd
ufL299aFg4ve/NDuTzJMv6r7Dne+eBX+TjPQ+TuDXY5/mRcc/woob5srLxgi
/s/Ozv8ZwN9qOv6G/9G+Iv5H4Vd2vfCrb8V/28b1TyD9Y2e6/glWSP/2En+l
+HeD3s6/G4j/17SX99+U/p0k74v/0uK/HCP+5/fc+Jrdws/3u/E14n8OxP9s
xC/tn1c6fm96OH5vxJ9txJ9t9gu9bJfy+ol/vJWjTyP0aSs7+jQNhI7rCF2L
/zzY6fznBvpuLe8fF/quKO9XkPn1oZtfpofMr0vc/DKvif9/oJtPRvz9wSnn
7zcSD2AkHoB4ASPxAuYq8fe/L+XL/DUlpPyStZIeeOQ8/0KfEOzXN8sunXD+
L36fsMQnefudkke2mNTvjMQjfC/yqJ3wh91S35skfkHK9/tqDkv/7Zb4g27i
3x4v83uWjG+GxBcsEj/3UuEHF8k4F5d4hPIy3n1EvsMHiVcyQo8fS7xBpvjj
e8t8xB9f0/njvXyf4uS7n2/fSHzBTplvnURfIP6gu8xHSbeSHvR25duq4u9/
25Vvp4v+8KeLJ/L+U/hFJ4kXuFviJbrJfLpE2l1U+uEK0W8+FnpfIv30l/Tb
HInXKCjzpafw01EST3BK4kG2Cz0jF4jfWSH0gd4m8THe3rBP4lVuEPocLfKi
g+gnZSR+5YTQs5Tn959Ouuia83/Z3n47+cjVFQsfS89zDlmjvYUf31s42+Lv
5zm4zdJRc8dk25M/tt/e6LMsu2Z96WtvfCV+r1rSQz9t63ZXRp571pYO73X1
tB27wsnyfewLP8n39f3BDd33jdTPryeIM28m9UOPZj0i5Xn7hcpv5Ps+vfef
zeaUnbIgbFh34bgR5bLs9ks3zSr0yfKg4uQvnzpyLNMerzp6wto6K4LlKSPK
1DuYaZNd+/LcC/faV6590h8+nfz6XrOWLn9wiVu/mVvc+i0Q/cPcF9U/zCui
fzw9o9uGlxZk2yI3Pjq+18RZ4U/pc8xt87NtiyWNRvWoMC+UdHPghlh6IOkm
zaUHsbDAkfFzPYZ/nP7oc0/H741j/dLKrV/CO/f/WLf8x/FzQ6btqX1JpW+z
fDwG9a8t60/y/RcF8279JDNMymf91XhBw87zpubaIjWq3FStf45d1fOrPy7/
+fy65NNv5iX0it8PLONpJb+R/EbyG8lvVLpV6VZ9z6jvGUU/dvPERxdsLLA0
HN59YbO/vk4yFbefG/fnF8vCsRVanq7VP75/utWezseL18iyyr5miyytXOG6
4TvCij8/0XrZtAz7VU7/38tsTDNPvNn2rQ+n59phM987VmR1ps39tMbT+/qk
20p790zd/GH8/t8vXbopLOkNm7x57rWO6Wb+zTe8WP/6VHtP7pTrJ6xLsZN2
tf6yd7/4foAvnT3TVn22+fm/+H3A1W+dvfHlDon2z6dyXh40K9kq+6t94lCL
bgNPx/f5zU28efeJ4zvCD4/XeGTS6AL2Zve+WSjv3+2+b6bI91e/U+N4qaty
TIE/F5RoMTPRfl639M1X20w7a/CEJ16rl2AHDRh07a7u8fuAP3Pp5ndJ77Tl
ywPj5+baKTeWGrSg9bHw0VJT5i6ulWgPfHrl1Bfa7/Zxsl2dPSBcUa/7gUlF
4/cDS35zVvKXmvfETfW+TbHPVXxt3b3DdgWCzWuCn99ToujA3+P3/XZ23zcT
3feDxdL+3q79Pv469460su8VSjRrpL1n58faa45LPF4FF49nzpZoectLP2/y
cdePy/jNdeNnSgl9VHD04ctfPf7qr2cfyjBLtvdsUPitFPv+w89mdnos23zt
6Mc2cvRjam/YX2ZqaqItN+CJ023O85kCYs89J+vXFhKvON/FK5paLr8pL/mV
vcas/qLWpZNHxu+5UP44s9jVx/SQ+mAX3+j8b6Zyzk+lzf74fb/KX6fbZ99u
/OwDdb5K836mSfcvv7rh9GSPxc/snxe9+cvFb/5yzvvfvhF/tvived/bwTu5
8j2+VvzZt0j8TeKO7259pH1BMyjr8MIOM1PtN113vHA8OdfnP3v4WPeL7ss1
971fYsm3L6bZKo2+Ov+X7f1xD7ar23H5eX0S3FT8+5dI/IuiF/uQy+/9b1Ke
x6eaPjSxxqQMc9/hl08tWJVkizf7aPHC59O8P07iV6zEF4Sjrtx0++GkdFu6
+5GdR8adChOadTj/l+zzS7yClXiFcOyBjPEHMs75fY8S5xDyHHtjhzsLrsrx
foENr1Z76vYiuea3vW1/fafc2TDDDL715QXxfXdXzU5e93DPuB9U4jPsXRJ/
8r8p5w6dvDDblnrhp27/9Dwc/rG27Mvd/jzq901K3Id/Nvlk4w87qhTwdry6
o0s1XfhaAXNLx/fqzap2NHzks4YvPTu7oE+/t23XJT+fLmg2t7tmX+6lR6mP
T5f6etxL4kmulfid6Ts31Jm8PN10/jsc1mrs4bD+3FnHGhz6199HnPFP7+xO
r58Ial0wJrjn3e34543Eu2HPM+84e17wsLyPfO8h8TZdJJ4m/bJqr7Ys+m9w
U9s9SyoWOhhkSn9i96Q/wRLfYpdIfMuZVlWz5gw+r8evanVJnyongvnSn+SX
+KJQ4ouCrEu/PX5qzJGwYovqJe8KTgRPSv+SX+KVjMQrBbVvyH6i9c8Jpnqd
+mVXHzgRPCr9TX6JdzI7JL6ndLu2pdq1LWjWPj1h59MTTgSVpP/JL+3zWOKF
jMRTBSWEvvEffi/xYYMkXqZn4/unh4XT7KJ9bZLrVS1gCgh9k/85iR+bIfE3
O274+Lqxm5Jsvdx7h3YfVMBMEHonv8SThRJPZsZPKHDTJf+cCZ89M3fs9zUK
GOif/BJPZHZLPFG3pENlWnfKMa+czt7wcecC5ibhB9ifZX57nODid2wfid/p
NqXwsWMXZ9sFtaoGPW5JMXWEH5BfyvOYeDuJzzPDSry5rtzudNNw67uXrSma
YoS/xe/HEf4J7iTxiIUlPqd/29/rNCqaZi/vn7vl7ScyTEnhp+SX+MNQ4g/N
tU+kfNBu15mw9T8Hyh5olkH53u/XWfir9wNKfKLEO5oRwk9Jl/glM03ilzKu
ap9yVfscU6PF93e0+D5+v2/bCb/MTrk4fg9UO8Gdap258ujILB8/PMStP8wx
WX8Un7m4xMzF8XXGKz+91vGn1+L3Ob8nmP2G10l+9PDPZT1z2JVnvpDyDwiW
7+e5z1n8S7am848Y8Y8E54bNa3C8dPzclVG3vvjHlVdk2OZP91latO3+8FDF
LeuLnF8ftfim4Hdn3tod9uj0Qo+1G3aFz0+cW35Iqwyb4vSD4ErRH4u5+nq/
0T0/FBve/urd4fWfvLGi2Y0FbOj0laCP6GvtXXv9fvhtE13+u11+c+LGu56v
tmNHUDz53NHfRhYwst/ExzGgFxURfUf6z5+j1ELq29rV15TbsPiNrQN3BHts
Ss07pmSYim5/hz+/zt/LI/rNtdIefb9zGzfedsOKXavKtj0cNi5/TeMurXJt
48ufffPq8Ei4uNHsZhsPxu9Fe1ny/+LyBy0k/2Muf/C35K/X8KH13dJzvX4h
+y8s+y9E3tt7Rd5/IvPlCjdfbJLTF2x/0Rcqy/xo6+aH7evym4qSP1Xo+w5H
3/Z9mf+L3Py3Q9x8ti3cfLZF3P4N20T2b4g+YO8SfWCozP8nJX9XV55ZLOV1
f6NGzWbr4+d9y/4O21D2d4g8t7+IPO8h/PVvx1/tNuGfDRz/tGOFP7Z0/NGO
cfqGuUD0jfeFH3Zw/NCeFvl00skn5Kt9Q+TrnJi8ip8f/pLbX2KvkP0l9zl5
bteIPC9/Knnw3Nvi54vnuv0p9kvZn1LP6Qe2qugH6SLvKjt5F9YSeXaPk2fh
pSKvtjt5FZ5y9TVnpb6ir5hLRF856fazhM1kP0um0wfCW0QfSBF5foeT58Qv
eHvfA61PfH/7Ranm6wcScs+0/Dy8/6tf1/6RmWr2vZbbvP7vi3g/lPeDs7J/
prr7XiDfC2513wuuEn2qqKtfMEP6t53r32Cu9C/zQtprpb1BBelPH1/k+sfe
LfJe+i+Q/guKyH6gXq6/A+lvI/0dvCz7gwq78QvQx2T8qJ+R8af+JkfqL/Ri
jos+A/0if4W+7Osib4X+bFFHf4HQZ/CcyG+hXyP0a4S+jdC3mS37nWq7+RBs
FP12ppsPgeyfsrJ/ypyW+XeHm3/mC5mvTUX+XiT7repJfvR3ma9G5rv5S+R9
feE/yMM0xx/sbSL/koW/9HX8xVRy/CUQ/mKE/xjhP0b4kxH+ZIbKfrKijp+Z
c7J+ucvxM/Ou248UdJX9SA2j/NEUEH6N/Vnxa5so8oF1uJIP7EcLZD+aedyt
PwPZL2cmib/8cucvt1sk//9k/9pllQfc896IDG/H8/70l2P+dB/P8IuLZwgP
bK14U7M+GT7eFv96f9HHiVc4PcHJ49GTp3Rq+2qOHbrmhbllx2VYtZ62C/un
ltvdOH5vr6x3bTe33vV2kc4HHzl289c59n5Zf1/h1tPervFM6zKjVw7PsWo9
biu903/kZ8fi99JeKePbTuTHIllf95TvVZL1tL6P+H35vtTX29/auf2Xfn8z
5z4N6/Rm06e7ZdhL3H5Nbydq5OwRdo7Yk5CLnZsPvLtLWppd2eI/i2v8PmLZ
/+zfpz/ealPq9pZVUz1d94y+n+d+4m3V31nSaloq9iKbIPairjLf3xJ5gp33
ghmfvTOwfrJtX2D7x/VPxu/Bk/3S3o718dvTF9/x9skgqfLU0h8VT7ZqP6td
cEXx3rnP5b2f+NqDyd/9UaSgHSX85AWRd/8IP3lU5GF34SfLRV5iNy4WrZ+/
90j2//r42JWfNfx8f3ZBW7PJ6T+TnjkdlhT+fEjkEXaALjddvr736+fCHxac
6VhlTfz+4awLbrmufMMEe3jtP7cmlTkd3iv8u57IN+T+H03u6Ji+90w4ff77
o6pkxu8jThH+fr3IxwxXnvlXyvPngkff9+cFrHD1N/dJ/VmnDIzW1+cfe7z9
1ymF083YLjl9h959Kjzb72T9XQ/F7ydu6vZT57knycTWkSfCe93+ax//K/vT
PU4U+fmgyF+xH5qpYj/E3tfN2fv8eSZPuv3dYUux/2Gnee2T6XPXbU0xH3ww
5+6nL98cTjv+x5AFqalmcfuxUy8f8zf7173eL/tdQ9nvGmSLfnCNyGvZP2tl
/2yAfrNU5KPst7Wy3zaoL/rMtSJfsWcedPbMAH3uIZFf6HPTRH6J/dJOEPvl
ONf/dqjr/+Cc639P96uEHm914xko+gt+FPrjvJZsob+9jl78eVVzHL0EM4Xe
/P3Dbn+8P8+I81A6TMn6d2vbE9TPjJT6jRP9Mk3ke0J/Ry/UV/bf57kX6w5H
LwH25tDZk406L8F8KvZn1i9iv7VnxH4Lv7nQzWfzivAb4kNkv73ev5/nHJxz
X51ZfPa5Av48+c0xw12ikfqZX6V+ch6At8PCrzfH3ovH4ZaI1seXK/LeXijy
nvXLnSLv7xX/wERnnzc3iT8AOSL2aDtb7NGK/5tVwv+pVw3xH8x19n/TVPwF
lCfnA+S5Z/JNJx+M+B+M+B+on5ks9VPyw6wW+aHvD/7HyQ8zXPwnWc4/YtT5
HeZq8aewvpTzB/x6lPF6vex/ikeGEX+MEX+MaS/ylPxKnvr2dXHy2KA/YB9A
H3jW6QOmssh/0p+IrmeNOt/EqPNLTE3Zjyr7U/25Sc9L+YxDN6mP8jdRP2+/
EH+ej1ddsKJdj+SH4+d5yv4EHwfdWewvvM9+9sJuP7ud5HCYK/vbHxL9b4Gc
lyD7l+11sn+50icVylR/MtvuW//r3A7D9vnv0Q/lbr5/wUIbP49T9rObJm4/
ezDrrQuK1/gl2+xtdKx+2+7LA+HnXi/lvIKT38fOKwhEv/Tx1qJfmnudfhm0
cvqlqS7xst3ezPi+7ND4uWLPvPv12Z4JGbb65nPPH/zpYEg66703WnzaL/H8
+s3+ULtWl4Xxc0LkvAnbfH/lz8ZcfNKfjzjot0s63/bTcX+eFXxuz9DsnUOz
s+194q+pIPrlSvHP6PuBZfztY+Iv2yLyYqX4xxjPJUcXl3/u2vh9wJxrdfPy
br+fXJRt//xy6oiDaTm2+pttiy4IM63sb/D0v8Clm5tdurlH0pl3km6rSfre
BjevGNA4xZ47lPz3q/cfDGdesWRT66dT7OmPiow6s/dAeP3QEzX6TorfD4ye
+Knoq9Xuq3tZxZVJdt/kSqv6/xC///f1+0du2vdM/P7fl938tT9G6c+q/Qr2
kNvPkeeeo/Wij5Z+rnLG0S7Hwt3Pv9d0wrgUm+T2l+Q5V+1kx91ptX5ItZfe
n77n4uUJZuWUrcO7Tkj14zEv/OnDL29M9Xyxq+jH4t/1cQ393X6YPPf7uv4u
wP6sPPf9rnLyxLf/uJM3Xi69GPXn5rn/d5T4h6s4eeDTZT9anvt/K4o+Jvqb
P2/uDrffKM/9v62cfA8vdPuTvH53ndu/5LHIY88nL5gaTrpzX67v566vdzv/
/3jQ8pqj9W/b5vd/+XteZT9Wnvt3t4p/WOjfn0O9T9739//I+/r+3P+JPiH7
qfw89ve1iv6i9GX0Hy9XZH9WnvtyB0b1K59f9nf5/NIf/tze6P29BYzsx8pz
f67Qh1H0Ya6JxTsfDPvH4p3PBneVWnp7qaUH/Tm8txdKPv93MBi/+7+AeZ/u
z6WU/WFeX5H9UZ6u6L91Ip8HuvVYeLZSbD1mlrj1l4+3LSfzbaebbyZT5lv0
3EE/30w/Wd8VqBwpz5+DWabPwg/vXpFglp8ZddePE+P33c5389HLx/dEHxko
80/fbztY5PvNwn92O/7j+/c1x3+M4j+eDiu7/ULmjWV7X16297C/x+qreeHb
/y45GNT958ngzZ1pnu6ui+b35zWfmnpqyK8myy5v2/K1N8bl6v018XPIov53
v85W+32N2r+Lv9/n7+zkVzjDyS/T0skrdc62399r3hR597Pkf17km76vVs6b
suskHkLf5/d67ew9peon2YkXfZ4+9YJUb/95tk/zMk9emGqHHv7gcIkGM8MS
bWcXbzs7fh/tzkojfhj0V6LdN+uXnNQaf4YvxvwQJ/39sw2+rTPsjq4ng8rL
vqs/8sEFYe/6F8xveDJ+32zXKrsPf/Nviq12dPes1x9dG1A+8n7J9D1HSv+S
aNuuf2bkubTlAeWTXv2X9i06PnEyOHKyUrMiPZd7/nB/rDm5ZprsR7tM4v/v
d/H/tp/E/+/o++OoWTZ+X6zoM/bSx2P6TNjS7XcLn5T9bvCxH24ecv4v3bRy
+9/CitH9b6ak7H9jv4F8z0x4ZW7WBY/n+vt6cqoWara+afyZ7Z4mN5/fCz1w
vOnHN+SaqgN6dF09O9cWdthWcdi80vnuUfOmZtuUDbvCa7uu8XrNnCXXnFly
zbpgU+JH4/+aEL/ftc7T353MaRC/z/Uqpw+aY6IPSnmmqJTHemjt35Hy8tzn
Wido3HHEBUlm9qml3/9eZH340CPdJ+Rem2Twx/E9/HH1nT8uwB/3qPPHof/5
/VhPO39X0Eb8c6ucPy2oJf63z3v1mLbus5w897feGPPrptvE1l2W/jnrnN8/
eF2n8R88NjAnz32tN3yz4snPshLsZf+bUzW56Dm/zr70q6HLCnVM9vEZBatP
HNzm4jQvP0scen9G2TZpee5rXTV+Vd1efY57P+jqWsdT+vU4Ho5+YuKrc1cf
9edSD7xn1PcLMuP3tSLnhzZ/vun+QbtCztva587bChfL/PjAzY+wlZsf/j7X
l9x5XGEndx5XWM3Nl/DWU7H5wnlf4a2Pu/O+ZL6Ge5e6+SrvB5/J+zfLfLtE
3pf56v0tUj+zNlo/M0bqJ+eNmdNy3tguxz/Md8I/OI/s3Lux9EDS7bcunfnv
74Ol/lXdeWUB9Z/g6s95ZGFzOY9M6h8Wc/UPMuS8s8saRt4PDsr7tI/vUf8u
70XqZ5pL/RIOufbPk/PQhH+Zj4R/fSrjS3wK4zvcja8/p3SloxfvN17p6MXf
Kzs6vVP5058eCXJ+2nXf++vj98+OF3oiH/R8jaNnc4XQM3pTaaFncEmhX7Ca
P/73X768ZkfmyTTzbu2eF8/5OsGvy9NkfmFHEH7n79lR/Muo+FQvF95w8sgU
2rjhjQ/6bwymPVP/wsUJSWaTnD+yWs4nKSjp01263+czSOTdBifv/Pnril/a
iVXmLa/4ePycc8F+n9XBSd93WX3i7zD1u0afLvgqyebKfiX0ELVfyR5w+QPJ
b2R/k9ePWEc3lf1N7Yec7PPQd9l2WLnHSh8tsjmotD73nU7n+XOBo0PGtblw
Y9C+xLzC5YvF93lxn2zno0HPM9ty7ZAPm79+wRP/+d2PftZ4fwb+Cr9ukPVq
nvtjKwxsd+XAdul2aM+/rht/cfw+2bdE/5gp62dZH/tz0aDX7bI+lvNhvb9K
2XNsVae/mQOyfpTzZf161d/zLetJ9PPK0fr59VoZt96zy2W9l+zOx/TrSebL
bFn/wYdnOHq1XRy9+nWe6INhHacP+jiRiU6+28bzrxky+PJ//XnGov+Gov/6
/vif+C/kfFnvn1P2SN/eLbJ+lPNp89w/u0XWn5d23zXsvsLp9v3hJ3pfcc+p
UNYHoawPwhNOjnq/g7rfnvNo/XnU8ImOsj7s7tZ34dOyvkMODXL8Jcxy/CXP
fbKjJD1T+I++X5bzbFk/kf7fV4sdiN8327BIlY92f5ro9VT2g4C/KPbo40nf
nPT3zd4wdePtx1cmevt/tpTHvKc8sJwf6+1nct6sxz2l/U1c+70c/lT4a660
n35z+6mOB24/1aHgYGw/1bFgU2w/1RHsPV6fwv+k75/lfFrW25S/cm/pkXMa
JZhefcdeee/lp4PCrS6cu79IgrkzqfeaU33OBLXqpmUsyS1oKv7RcMSc504H
Ccfq1+l0JtmM7XLDRW02ng7UfZxGnT9sBst6n3WZnB/r149lZX797eYX58/m
uX/2N1nPqfmFPMhz/6z490wZt94MxL7j19VnZX3ZzM03f/+B2Lf9ulHs5x5X
bl5p+gvLDoZ9rxuwbtKu+P2yk0Q/F/uVEfuVWSr8h35hPr4l60n4z9WO/5jh
wn/0/bMtovZtn/658Ev0ZPjDDscvzRCxN+r7asXeaF52/B57mb+v9h3H783i
Y7nPj81KtSvWfP1v+XBR+N6ukc3/KZJqXz1Y6Mmh57neyA/Tzv+l2lNXTbyg
0sS/g6M9qt3z8+kUu23pe49d33x1sOjdO09VCLJt3VeeHjuz4cFgzVNNzhW8
J9tedvj7taM2HAhqy/roE1mvIJ9nVEn7ZOZfmfac248TVpD9OOVuiu3HCZfK
fhzsumVrH6t+U/Us28Dt5wkayX6eL2T9XU/47Uuy3tb30cr42VvFHvKD8Dvm
7Ul3/nIYiH0EO4Cqr1nmzgcO5Xxgc6/bTx8mu/305qLSkfaYs25/USj7i/z+
EmmP6ZMc2Z9vfojuVzKq/eatpFj+gPwdpT/Ij74zU+r7s5xn3Evqe010/785
KfuhqO8K2Q+1Qup70tkrzEqxV2AH6H/gymK56blm3tWnE9Keit97iH1jhcvv
9YQ+Lr+V/H69ulf6s5uct3y99CfnE9yUHGmv18fKfVi2wPS2mbbJileeWPFK
/L7ZhY4ezcNRejSlhB7XjM2p2fL3bG9vGHt0VFhmWrb5Zeuf9/euvybYlFVu
XTObbR48cef131VYQX6vr2NvgC44v/iwO784xP7wmLM/+PlTolJs/oTMn5Rl
sfkTYh9hnP15ypVi5ykH2EtKO3tJwHz9yc3XgPla1c1X78+4wfkzgnoX/fj8
vvPr34VvFbt1fdPdwY5H5iZMezh+/6y0x9ONtMcskvOYpT3mUbGnSHtM8UoR
fmB+FX5QUvjxXrG3i76T5/5Z0fdtZ9H39X20ov/Av/PcR1shyk/z3E/7sdDn
fKE36PP24rnBijkpdlPpUSsu+Hhb+ISjH79/T8bDqPEwza6OjIcZcigyHqZ/
dDzMKzIe4n8xt4j/JWvOvc0++C7FXlfm8h5VRuwK3/jrn07PfJ9ia+eeKvfD
op3h+OsbBI/8lmK3NPy33/ybtofVghPdVk5NsQ+uHPLBrV/sCKsd+bFZ4Q/j
99N+2XLdQ5mDU2zNP555zby8J3ynZYVnrxiUYj+ft+1/077bE+55YNyxhZ1T
7MhGL7SuV3Z/qOxZ9uw/qSdW9von3LP039GLi8XvaX1Q0kvWrz62zouHg7PJ
DX579/x87TPj/gbDHtkW3lftmzcOVki09OdS15/Bqn1rKhZJSzBlprYOz/1+
Jhjzfuf3K81LNm898sl1w8ufDZrVmrh99Lz4/ab1Yv08Mfj8rcLLqp9K8vft
gLEnoYfW6b/tZPBx/L5R7Ek3OntSKPm93or9qrykvzFiXtUvvovf//lb9Vde
S/n6/9z3+VL7md+/FL/fMygzb1pu9/j9nY2bz/t3+aD4PUUNfm3fYXe/3WGb
7RnTDtbLsGNe+bTtj+12h2e6tBm3+IoC9gfBpxw2T0j+F11+o+xbdoWs99Jk
fSjt9fuOOL/iKbd/NOT8ijfd/lHq59eFp1y7wh7P/9ej8fsawaXLX5fy5cL4
/YuC/X0xpIPLOHoIzwg97Kl3xXONi5z18et96k5r9v3pM97OsOi1x26rnxu/
r+22leuKbnu3oJ/nWWPb3N5mc/y+th9j+xGOeDtGsdh+kn/9vVLXdWjR/w+b
5v0r3/ww4K9G1eP3jI1w2N8v1rXfogqN7023swa8mVK+1Xm9ft+Ua1/teSDs
kd7lqQUt083PGzPP/8X9gP8PMvapvg==
   "], {{
     {RGBColor[0.148, 0.33, 0.54], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmWmQVdUVhe/tpnmv3+vXr1FEEGJwBExpjJpUYWmQBlGRQQELgv4Q1D+C
NIMGEsYGZbRBC0UwQEPUWGUxg0JELRk0IihKoYKKI5rEASOJIjRD1td7dfnj
vLPveWe6e6+99zrnnjO0pt+IkiRJ9uinVPW9mSQ5T8JIPf8+TZJU9Q9q3yC5
meS1qktLQj6q9q5+Rm76r5vkGyQPVxkqeZvqjNqXSF4tuUTyCtXVxSQ5oPW6
FmO9Mfr/TpVy5lEZLblTLkmWqf5VheZRWSH5YrV1LE+SqzW2vfoN9vxnq76o
eZLsU/v5qjvmoj/jTqquUbldZar6TWGMyjsqk1TKVE7XnDnN8xpymeRm2kuz
mDvr+Zn3guaxf9bi+Qrm1RqLVXfQmof1X4PKfOvvfPcfmAv9fliZJLdKnij5
M8mrVK6UvFJ1rfrulHxc69+nsVOT0MtbnrNa5VWVn9Kf98Ma7IG6xPaiD3tG
94+oHFMZr3JE/w3MJsm1STwfVRmQRE2fY5IPef5bVbq5D+2nqc6r1EqerXqm
SpVKc3Ro/f5Ztmyp+f+k+s1s6BR9YqurMmHLL8uiTwvhbKH09hH2kD7OUN9W
Kq/reazGn64+41S/WBL/7VD7zmzI9LlDdVF1neZsWR5r7bQdW9qWH2jN91VW
qc9+/ddKpYXKXJUz6avSLo291atPa8ktVR6SvCSvtbXHxaq3ab6tKuM05wjt
/yf9f7PKOsm3pYHD6ZrjAZVfoFO9Vw/9v0X7v13jjht76zPx/l+UhW4bktD/
Beq3FdyqXl0Z+lpTGXv/MBPvfmfzGM9Y/I494GvvSX5ApTINP0HHLSsDhxuM
Gfrjo/2S8JeuZbHPRO+2We90UVWSPKbn7ion1FylfXyrPrWFJPlcbXuNo+El
4aO3qCzQcw+VU5KvB+vYRPLS8tgj79bN2AFvk9TWJg0/QU/o61/a502F0GOf
QmDvPyor1ec7y+CQuPF9Gthuqb1t1NgzVF+SC9uu19hv9P+3KoNUPnH/Lvab
w9YDuD5k3wGfh7wW63xnGV2i06zjxLuOFdPdXmm9HrZOP1X9mddaq338Tm3P
FcJnP7fednj+X6o8qnIwjdj4bCHiyDvSw/Y03qGt3wN5aRK6BDPoHAzwDLYa
/B/tFXqXadJ7XvXLFWHfLRWBTXSLjhZJVxsk36w1J0s+oP/qK6KNPu3t0/vs
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
         "]], PolygonBox[CompressedData["
1:eJwtlUlsl2UQxqf/Ukq///LW9E+hwqUgIiataA0HNkGIgVIW8SCJN0JiIoaK
FAvKUjh0AW540ChQTiZE2RNZYmJL4cASPcgSFokGEA+eFKrg9nt8PEwy887M
884783zzNa5sX74mFxFvIiOQm6WIjuqIdzi8gd6WIn7Gvok8yiJ+5Gwz+nr8
P6APcXanKmIN8qAQUeasH5y/sEejX82sXyCnBaxHxYjayoiVNREzaiMWcfZV
zncsRi9z9sWoiGZy7oCX4+ww+iFkEblrsQv4X+aOlnxEHXY7+SfIH4P+kJx2
YuuI6cQei5zEN54766hlKRgHyT1KzLKi36i3KqaB2ErONmD/ir8X/XdyJo2M
uIZ/Nv7L2I/xbUEy/Imz1cT/gl2Lns9cm3qyG+yeorGmcP84fPXJtTZQXxf6
Yvz9+OciX1P7LmI+Q+9jGH/zvir8LZWuaQT6Ofz38B8Do0T+0aJ7M407j6B3
FV1LPfib8X8CxsUKegzGHvQlRb/9OPIxWFeQbbzvPHjPE78F+xbxp7jvAfGb
sC9gfwvek8zmaWLOEDsRvDH4vkE6iX0BuxvsJuzPqSWj/iHe8xCM2xXG3Ipv
QTL2XTBa0V8tupZW8DcSO5KYF8McEBe6k7EbsXvRFybnaiaazU6kH7sOjA8L
nolmsxXJo89L7s0tYuYnc1hcvo68lCzSbyB/4FtGDU3cNQv7UMkz1+yf5b7h
zJwVdzXzi9jb8Y8jfhP+XMkcF9fVU/X2I86eoP4yMe/jm0p+fY05vyPvGWlW
X5JTRt+YHKsZa9Z7856dZphDn5v8ltXIFbDfxf4t/E2sQx8omEuawTPkNyfX
phk16Vsq+W36Rqfg70nurTgtbouT4uYAMRPQgx524nub/H/Afo76yzXmRA/1
7Ejmjjjah34f/O5qc3oWuY9L5oJm9Cf6xGTsDvAak2em2Ynz4n4fmOcr3CP1
ajJnn1LGdHIOkt+F/X2FOTVM7Ibkb1075T30/SXPXjkTMn8j+lZW0YOzmXum
3h1ADmNfLnm24tx36D+BeTrnO+7lzXlxX/3XtzSTN+2rcs/fIr+Xsyznnqg3
lzL3SjPfTuzo5NlqR2lXiePiuji2O7kG1aI7A1+DMEa5Bx/g21/wLtAd/QV/
c/r2tKNfR5+TzF3ttGbsp7AHq83J/7iZefdoZ7+RuefqvWImJe9E7UbN+LXM
O1y7XDtUuzT3//5QTaptgJxXuGsF9iD6+uTe6qxD7yl4d6tHrUX/I/Sv0M6Y
rF3JHcPhnd6G/1+p39fS
         "]]}]}, 
     {RGBColor[0.39965144230769234`, 0.4441586538461539, 0.5841346153846154], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmgmwVdWVhs+779137z33nnsQDEQMyDwbJQKiKArGAaIRBR4ItsjgPKBi
bBCQISpEAdGYqlYQG0E0iQhJ24pMJh0iHdtokmpNMZhEsSPpDgJ2RRPs1v4/
/kXZVe/U3m+fvddee+21/jWc23nK9MtvLSRJcnNjkugvqemfAU1J0qUhSb6d
J8m9Guur9u00SRbo3Wnqd9e7llKSbNG7hfp/rtpuahfo+Zb6HXK/H6dns/7v
WkySwVrzZ/VPFO0z1f9Q/c5Bhzlfr2pfMdClliSLYi37tNf8M9Qe0Jwj5SRp
pWcKDOv9581Jcpn6J2tOPz1nxfzHKuJdtAp6JsCzpk/Q/Cv0bFf/Cb1fKjr/
rX5F/bKes7V2lMZWVMzbN9V/XP1L1M7XPh3V9he9t3WWJrWDNWeeaJ/EmsR7
Ph77Tix5P/aaoPerNPaEnl+UTIt1f9E5p6rdkZoXeOql+Zepv7JiXv6svW7U
nFEa36T5J4jG2ZJTp7L3XaLxfhXv1Uv8F+q+C+7kE82/Rmt3iv5mvb9Dz7V6
96nWdVB/mt69qHa6nkka/43k1kH0Wzf6jpDDveqfovUb9b6/6HUS3Vma/3vt
s1l8PCxaRzTWU88cjb+r8Z+onannVq3ZoXZ2yToxtGr6W0RndJwX+ffgnkvW
rYl6d1BzXtbcxVmS3K3zN2bWi1kF6+JhjZ3S6HMiC2TyttpU8+Zrzlvi939D
Psj5BPE2Q/T31H2X3BO6tFftHj1DJLdM81arv1Xj9+SW03jxMkLrLir5/Oer
Ha+9fqj+3ySfreo/rWe61t2q5wei0Vr0b2/2fT2tsbV6rhL9BwqmsyHoXBC0
Low++n+o7HfQPy9soSyed2uvb6h/jp4/8l60Jonmfer305r1mjMk+sybonc9
9WwTnYEaG1S2Hi4XzWvV/2Xus8JbN9G6R+N3anxP7rHVwXO52Xyv1tq5uXVk
vmS8QftdrH1Gad0a8Xab5uWN3qtbg8+4Q3PGi6ef1U0TWfQuGAOQfXc9l9Zs
Q3tF85Cea0XnoNrtBc+HB+ziWfVP17zfFj2nWXst0d6T9e4X4uvnqXW5nnt/
bJyzt23y2g8KxpLxIecFWtuita9ofp+K7/jhgjEGu+/BWu21UOs769mGXuh5
tmDcOqj3PROvG1D2WmwDHemi8y7T2PcrX/D+/eBhuOafp+cHmrcy99orquZ5
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
uu9qfRvRqab2U4x/TeNXN3mcc9yUO7+hfgD2/FPR+NMUtTl4xgeiH+jGmWrP
qDjXvURrPyC3UvtfkstU9DhzTMh87hW9ZW98Ij4QXQTD9lWcn9Mn5tsT9Fua
vS88IQ98MTq6uGI8R8epM5CrY9/kiW8VfS586MDw6311L2M093eZsWRjxITw
0hT83Ji73ydyqOcip9iUmo9B0q/bMtN/KTXP78S5RmrtPupZuecx//eZ7xxe
4RM5N0bNFEygNgdWcA+MwfPCeMf44tAZ9LF/xAnUiT/NbY9bqpbB4pjzdt26
MCz3nUyPOiE1O7BwUW5bPv9YrSb2QifR7dNiDTiKfMDSvXFGsODRunX3Q53r
/KJ1EGx/JXwZPg1s+qzoc7QEZh/NuVLXP9qmPnfPOCOYBFYTl6EvNxRtV+BW
JXDs4cw0l2eODYmBiH865q69tlf7ct01o811+wx8B76GOsTE8IM/z/3/z9Se
2spzviMZ/ia3j3xD7df1/I5aUm5cB9/Ba2oQ7aKuQl5CfkK9/Vj8cXrBdKG/
M3c8PDV88es151hnpMYbfCuYA9ZRj0J/iMfXRv0T+cMDd/B+yXp1OGIz/C62
3C5qL9g47aror4mcBVzk3vZFPrYusJJ9L848/ybxc3bmfffXfX7k8KvcNjg7
Yl3udXyckViSGIX4BJun3kWtuBh1IPCB+ge1G8aohxdjnHi8OfpzMvfRqc9r
xsokc30NjN2ttoP+f1DjHTPbB7YzLHJKvkOQq1LDmxsxNjHk9IiNPyv5jjjH
WRHfU3dbEXFUe93/o6nzUPJRsGdf2PLjGl+Nf9S+D1StJ+gLOTS5NPkmtSDu
AJmDtWMj/vme1q5HJ3LPXR/zmds29If7fC/udGjmvXq1so3hl4m9L8q8fqPa
05t8XuoDkyqWKXHC4CZ/S6BWgP1Ql8d/YUPgILKiBgEmgA3I8PrAxs25aw6b
ctvbDTEffYfOvLDrhojfqOMkEa82B1YTh11V8XcjMHl06nyljdrv5q6nUVcj
Zqd/tD5fdOyO3SAD6CDzhsAPdOz4VpZDc+rxQvDQMfThubpjIuSALr0XNgI/
+EP8IjUZ/D41Dnw/PvPJqJNQy0Z+5HnEdNReietmF90Hl35UNI/wQ65Onku+
i//5ccnnXVS1XREvY0vYFDXULPecmeJ3WOo89VPx9NXUMf25uc+ELDgX7QWB
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
HAmaF4vm/wEdmsQf
         "]], PolygonBox[CompressedData["
1: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
TDN4Gvy/8ADtbQ==
         "]]}]}, 
     {RGBColor[0.5877524038461539, 0.5102644230769231, 0.4735576923076923], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmgmUVdWVhi/1Xr160723HOis4IiwOooTEBXRxjbG7kbXsiU4USDEgUHU
tKIBQ8UBWl1RygFQMJF0S5sOOAHixKBoEpXBWSmcRURlUkEFVMRu+//4dy17
LS7n3FP77H2GPfx739f1vEsG/ltDkiS3FZJE/5IH9N+3xSQ5pFOS3FpJkqF6
nyqCi9XeqfZF0dzemCSD9b5c/dWiPVP9k/Ws0/vHepr03CCaG0V/r/ova6BW
SpKqnhXiubxieUdmSfJLtUNrSXJRniSNZclR2y76vUW7l57D9LeSxn+l8ZVa
U2snyxmtdoPa9XrmSs4xeg7X2KPi9zP1j1B/gfqPIUf9Z8TrGvGdovdLJf9Y
0Rys8bF6Duvk/TLvUD0fBX/mlWNP8GNf6yqmf0v9ReK1UM9Reu+p51A972j8
XbVTYgx5/xBrW8hc9TeKZrj2850YjlA7spP/zlzWM0LP24l5vBv9ftUkeUnt
P9aT5L5OXh9rGxF7YP0vRR/6I4OG82FdI4P/meIzRnLf1tnv0NrmFcyjL+er
8WNy83gpzmW26E4Qze5pktytfpvW/754TNF59hL93eL5ufa1peL9bdCzvuIz
nhJ7Qf594vGbgs98u/62reKzPEB8xmv8v8T3m4L1b7ho+kven8W/k9YzWPJa
1V8j+aPUjmzyWRxW8Ttz0YuVcSZ7ac7j6JDazRXriZrke+nq5qLv7DQNDNRz
uOY+r7GPNXaQaEZyP+qfpX5X8VhZ9PtS6fO6oClq/IWi3/eXjKf0vl/uPbG3
4aGHq0rWqT1F+6H6XTT3FvVXlnweh2jOUs09WG2PgvvjRL+/dP4jtSM1vpv2
PhQdVP8gjW/V+Gj1P5WcT/Ss1PNEzTS/EO2D2G/B9z2n4DvmDl7I3T9GNFsl
/xI9JxQ9h7nIWaTDG6s1bGY+9y5ZMzX+svrna/wB8eis94tFv0n9a3VHW3Qu
if4+IvMez1d7h/icKN47C17jz9UfLV6r1A4o+v2EOJcfa/rX0ulLxecbteti
nLM6W7x+q3YfybxTvDoXf/h755h7fsgdlXlPH4hPJtphZfsx9GmW/tZb65+q
NbdoPQU9W/X3a/Q+Sjz2ldxMe5mouXnq88OncIZdC77fyxti3bGXNrWvSd70
gv3AoNAr/Nsv8J+iuavsPZ8Yex4Q8y8SzeuaO0s0r9Q89wTt8Xg9e2o93+jv
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
DT38P0IW4ak=
         "]], PolygonBox[CompressedData["
1:eJwtmHtwVdUVxo9J7s3Nvfecc8Fixwgi0AeolYItBDDUWqzgDI0ECYQAGgRi
AYsOElstjwhOxQgChlqJU2jRqlVAWkEIIDOCQBUBBWlRQdQCKgiVR3mElv6+
fvyx56511nOvvddj33YjJ5T/Ii8IgssvCYICfjfGQTA8FQRn8oOgRzoILgF/
rjAIOsM0H/wG1kAYp/JtNPCoKAiKkfssCQ78s2wQbIVeAD2AfjfyjeAHkG+f
CYJ61jnwEdjYBO1cURAMAG9G/iHkV0H/EvgL1jjwSawTwKdYb0O7n3UU/gus
adj6HB2T0fUb/D0EXJDDHngt5vOBl4bYRfYP2C8BXgVPA7xl8DQBv8saC9yM
vtno3sJqmwiCIeA7gLdBfyXfPO8Bl2HzHWgJ8HHg0yPv9SA8DwPfzJ6roP8T
e1chf1PauibB/xH8p1iPSRf8J4H/gcw9yI/H30HwrkbmMP7uRqYKWwvguR7+
Yr59Bf1Z+LvA35FvT0BrJn4V+Ps+9B9D38G3n6fss3y/Ax31gWM6HtkP+DYx
5RgoFlch00lnib3hwP1YI4BP4H8nfHkKnsp8+9AIXM36DFozMncBv0pMO6L7
HDy9kN3At5fzfYfeBP4aeiH43fCcAJ4R+myO4fMjwGfw/xu6d+AP4t9mdBwC
vpd1Gt+Ph5bdA74G2lDwm7C/DnwY8IfYeA3981lT8PdXfCtD36fSB3yMVQX/
aHT8S/ZYE5K+U/djbwNrHLL72fNG4KHoGAG+Evz36P5T2r5VsvbgTzXrRfRX
wDMSuDf8tejaBX8leCn4JPDu8K8Cr8iYdx/0rujvAz4d+sOsFPgL6N8E74vE
M4G9K/BvJnh38D9Db4B/Rb7PbA/0J8CXgZ9lbQXfBr4y3zHYDnwEmzXI34n+
Q+h6FvylxMU7AhznnEu34c9W+Buw/70889wC/0BWT/DXwAcB3x4a1hnrrD9A
x1Dw8/g3Cvsrkd8FPoZ1OOsz0lkthV4EvRaZTxKOuWK/THca219jYylwMfxH
8f1B+IcC12Wd28pB5eKujHm7EPO+0Lvhf1WRz3QVeAX8O+Fvh3wO/Eb4J2Pr
77rP0KpC35V3+XYpsgl4MoW+47rrH0I/ha6B0PcCj0JmL7QSeL4DfVjWutoQ
/xmxfZAvaegzI9953X3l3Hbo96LjZJ5tPAb9o9C6VTNUO27Av/eBF8Kfwp9H
I+tSDCeEroGqhTtYZ9nnV+isg3cmNo4o31QPgfsgswL4+9jvDzwWnXcqP7Ku
HYqpYjs6e/HuoeN3yA/J+q5+E3wK+K34813gc9ifjf1p4AuQfQue16Ffm7Yt
xUSxUQ1SLWqA/zr4W+DDrKR1SNcx6K2VD8j0Qj6Gpy7hmqXa9R/wGuL3ADz/
DZ0DyoUOyP8E+X3gtfA+BE8lukrBtwXW2Rv4U50f8HZ4uqF/L3gS/FFsXI6+
m9ExQ7zg6/B3Ht8uJFzjVOty4NPz/O1J4BLOYDhxrubbG2n3PPW+Muhbkf+R
akrSd2ww+P7Id3Ui/B8D/y12Li5hPQ5vI986QO+hegX/nNi1ei46FkPrn3Vs
D6jGZFwjVCtKWKvFj09Pst9p4HND90D1QvUE9YajoWtZK2w0QPsSfCR4Ghtd
oZ8PHVv5LN/3gw8BTkK/Drwmcq9WDR0DfBn7bYcv96GvArgc/hXY7gF9Qdo6
pbtaPVm2Ytd+5XAOf1vqPiBfDV4O/AY65yt32cMPwevB/53nmeBx4AHI9Aj8
rRx4WuTZQD2zLvKd0t2Sjs7AldgfrvyC/kzsM9ZZq0YWA+9BRgPMCnxqGXsm
0WyyEX/7QmvNtzXg98FTDHwm694yGB/K4P1r7NzSnXtVZ6X6yH5f4FtvzQuR
e8NJ1VjgFrFtac/au+6M7s5yvmWhDWadLHRPa4Xv7bH3fIFrvmp/Ah1TgbfA
U4/+MPRZK0ei0D1AvaAUnufRvRP+mkLnQKnqG/41FLlnjVGvCW1bNfaB0DVX
tVdn3gR/SdpncRffdqBrT8a9XjmiXFENUC1QjK6IPeNp1mtEfz/V/ozv6tvI
nIa+BfqYPPf0yaKDV+a55qn2bWa//RK+Q5uAK/m2BvhG6IOBX2F1SHqm7Bu6
p6q3qqeot4yPPVudVn6pVmB/PLZmsxZrtohcm4+DXwm9IjRNPasRX3rCsxN6
T+0J3pci91L1bPXuWRnnqmbQt+Btl/Gs9jTfalQfY/uqM6wE/mXoWUI5Fup+
xe59moE0C+3O+O6r56v3T1WNLHBPnq9ZF56PC1yzm8C/zfkdSbnnqvfuZE0B
LlX9UKwyvmuSaUZ2v3IIen++LYDelHWt0IzTGnhqxrOPZuK18L8Te5bVjDAH
2g9y7iU6gyHItwJvwn4peBWxuRr+N9lPLTY6Al+d8eynmX1s7J6u3q6ZQrPF
F5FzQ3dQd7EOnuKUdXQCvid2rVGOK9cvg2d9ynv4I7KDss491chnwM+BT0z4
Tp0FXhJ7VtedXwr8dOzepRlUs2iv0GelGCqWqlGqVcpZ5W6btHuH9qi91sfu
Laqpw6CtzXrvmhE0K3QFXw5tEfi38Kdz7NzUmehsjrKWJ32nekBrD89C8OXE
pwuyITYWp9zT1dsP6P0U+E1yEHhAxrrVsxrx/WCoh4l7jnqPzlRnK50d0L0+
du6pB9dlnAPKBc08mn1aav7Ndw9rEbqnqLcoxor1vtC5qpnmmox9lK+36g2X
dk4oNzQzrAUuZJ1N+I2QBC7KeTbpg0wt+PXI35HvGClWmrE0a+nMbgNeFHv2
EM+wjHumeqdqQDe9Z2K/tZQTE6FvjjxbK6c3RX4T6W20mz3crnkm9iwin2Yp
VpHfCpoZLgjHv9+mHOO1GfdY9VrN4JrFo+hiLoHnIvdI9Uq9KX6N/Muxa+Ei
zbzA83S/Ch3TucALY/cavQGq0NcS+Zl5nnEujdzz1fvXa56Ad5R6ALQNrFsi
v8H0FtPMrtm9DTxrC50jypWB8OyEPltvSHw/X+TZ9D1WObS2sXWrJ6s3XwO+
Cbw18tNjx0ixUg1dFnrG0qylO/r/uxr7Law35V9i90D1Qr2Bl2h+j9zr1TPV
O9UT1Rvl45XA3UPHRnv6aeQZS7PWPPBP0t6j9qo9aC9HQs8G6gGHQ9cQ1RL5
fC3w56HfIrrzB0LfKd2tRewnk/ObWW/nOeBn4U/nTHuKtY74HefbI4HfzCdi
13zVfp1Jm9A+yTed4XOah2K/pTUzHwbO5vzWUY5GOcdYsa7nWx7x3xz7vwi9
WfV2VYwVa/XsdlnP/Jr91bMLkG2KnEuaSVYDJ3J+y+s/h6TeJrF7t/4TGar5
N/Jd1IyqWfVM7L3qzae3n/aovepO626/nvXsqj23hf4/ho5mYw==
         "]]}]}, 
     {RGBColor[0.7758533653846154, 0.5763701923076923, 0.3629807692307692], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmXu0llW1xt/23t/tvX54ie3xlNhI7CKoaRxUDMoE7ELeRQUVxCxLHKeR
5sHTqSGgeMlSuqHWSAQS2XIzowQcgKg1zhEveNmJkJAgphZSypaD1vPjmYzR
H9+31rveueZaa655eeZ8D514xemTO5IkuV9/nWqPq5LkDvX/kibJj/Ik2ajB
hVmS3Kr+RzQ+U+PzupKkXUuSb+h5sd5tEs0jast2ksxuJkmudlHmufAYIfpP
69et5x9o/oc07/sa/5LGhus3RuveovEBGr8lN4+7mn5/W+p1Wb+hNdsaO0jP
C/T8V7X3qr2gTJIT9K5btIPUHqHfh8RzS4f7X1L7SCtJhqn/ce3hTvG+pm5e
s/TubY09JvqzGkmyrcvPmc7wd9FcJd6J+ns0tjJz+26nzzJDc99Ue49I5td8
loEdnsd5+3d6bESMV1r3Mr07RfRvFUnyNfWHiOd76l+t/ruF3zN+qej7Csvm
KrXfqPkd40s0Z43aidrbH8XzUfUP0W+56B5Tm+r9KsniIvV3Sj6LRdNPZxuv
+ctEs1rjtcxz6LejXRP9U7TvM+NcCzXnRe3/nE6faUSc64jSNGeIzwva26Wi
G6e5B2md7oaf7215zeHiM0k0F0T/Fc07Us8fU7+lvV24b1x7Gyser2vPeeXx
NTrHWXXTv6p3w/W8v2h3iffFXb73w8SvnfvOJ1bWi1ldvveaxns1fob2u050
OzW+v8YH5NbjQ9Q+rvE3u3z2i8R/leiPUnua1h0ffJ7ptP6hey/ozNeona65
EzT+NdHM1PO1er5c7TrN7VBfTXK61p2o9wM6/e4rks1yPU+JNWd0el32dWOn
9/ZbrfOgfjV0WGMPqaMl97Yrov+Y5PbferdR/VXa5xfRj07bD3b0fS1+idYa
o/HnRXNvzTqKHqKT9AvRPyiZP6yxhpjeUPq8o1PbN/Lda+PivzTOiP3M7/L5
D8vd/zA2rt8TWmeu5P/h0vSf0Nix+i3V+MDSNo/t35paJsfXLJenNHY2vkDt
KL07SvRdqWWErGaHjWKbnLFXz2vVf7bDeol+orPQIAdseWXD98v+WWNul+WP
vW4I+kGl516sfQ1B3+NcE3PTTFB7OudS/zS147WnH4r3ALXvdHgcnWReb5dl
MyyzfRTyGcdItnfq/dFq/9S0bR7a4bvlzNxvj/R4gX4L9X5B3edhb9gO+v+S
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
         "]], PolygonBox[CompressedData["
1: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
5tTB/w9FQUg4
         "]]}]}, 
     {RGBColor[0.9102163461538462, 0.6455408653846154, 0.3216706730769231], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFmXeQltUVxj/2K7v7tm9BZal2jaIUI5YogkZFYAUbKCbWODHYUCcYS4xG
ZVcharCXyQiKBY3RqGCZqDQRQVhsEazYYoGZSCLWiOb58RzHP969Z28999xz
nlO+rX515uETG0ql0gP6U1Y7qVYqdamUSkeLfq6pVDqkuVTaVGOryqb7Nrg9
NPoPVjta38Ca5/P/Zg3uOzjmvKexNtHvaI/V+kaK7qP+i/NSaW21VHo+UZ/W
dlP/lTE+Sl9XzRnDOq3fRV+r5l+uvu5qJ2reTVr7gviclpVKiegH0lJpc827
UfR89f9M97i00WftoDXXq91e7Ux93TTvjtz7jw4+OWdM0KeLp0oX9dU9Tj88
cAd44x7ceZC+C3TWP3LTjeJhhdbvIXpo7HmY5r9WtswOi/1T7Xus2qd0zqb6
JmiPLXSPLqJ3En2o6LO1Z7PW7Zb6HkNDbp82ev9uJbd7xlmbat4Lap/RutNF
T9Lapdrn0LLvy/37q/2pvtNKP/K0Ku7UFjLnHrvGvZ7XXn3UNmuf5yTXX1b9
//zc57bonDe0ZmjN/fvWTK9UX0eh91V7r9b20b06NL6t6DvhU2duKPxumb5j
NLZO75WKbtfYyrLvO0/rZ0s3VmnPMzR2oM59U2MHqD1I4yP0DdDYpKp1Cb0d
pr7LGr12lsbu1jdN9HNaM0x0L50/V1+Dzlul9o+a/7bWDtXar8XTYu3/VeHz
hwUPJ5WtW+jVmqrPG1Wyrm1Rsx5yJvN5q/ty9/9X935c/D+mb73mnq/vvKpl
sahsuhcy0vy+mr9O88+J/bnL1o3+H/pL8XSr/p+iOZMyy2t47nM5E319QGNj
sDmNd9V4U9Xv26NiWSPnbqKbRb8eNnRj2BFt37jj5Zpzs3iuqV2g/qOq1rcj
1C7WnJk6o60wfZZkOD7mbIUe6/93NX5ybhscGXq1iei8ats5JnQJXW9Xf1fR
ZbUTtGa56N/k1qNhoVc91F6r/sdEV+BF37Pa57qq+58t+czxwQN6tGnV975K
31rJZ5HG1zV4f2TEm58e795XPLYGvoExw7X3zeq/BV2RXMuS5+8kjw7tNV9j
Qyp+P97uJs15QnMukOz3Vv9e+magL83e93Z0WX376Jsp+kzNyzX/QO05OfV4
u9oXy7aLVu15bWJ5bdOi++ubp/5LE2Pz3LL14erEb7ylxkeIt5U18/Z2ZvlO
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
PcdGvYu6F7gIVlK/Gp9YTj0SywAMQw7kwOTCi7ChxLx/gUwLvzvvjx8D38Gl
6bl984zcGIE85mjda0nED7nxBPtB1zkb/KmUXHPgXOpXLybGvam562zIjrMP
iBrU31LX2qi5bSJ6u8T50r3i6wCdm0muExPHqcSrd2vO1i2uvzwj+rU4h1SH
HLozeFiauMZ0UW4sIUdCxtQg0N9vtHZU5vU9U+d/iyvme2rUO5D5fpnjuH0L
/78ofBdxJfElOLsk7BW7BseWhx72CBq8wQY7w36IVdkDW6Zux7scEzF8Z9gp
9QjqEgtT+/6O4H9eYpu+Rvx05vYl1Ip2C77Qn844j316xbnoxLep92lPnFPB
L3hLTWVMxfWY1sin6Kd+QKxGHAhvG/drMM5t9O/kGHnEL4XjL+pCxAajY8+N
8ql6DnhCvaxH8Hl76noItRlqaW+UPU6OMj3OpUZFbYG8abD4Hqux+TprdmAN
MSY4tCBqLMRLxKzEJMS8xGFg+DmpMWsnnTUtsf6gR9SPeIez6Mt8367oXeTu
8Lowt25RpxkU9QP0Ep2lH32jzodPrEVOS5xOfTKPOkBr5HF50A/GHbFx7pz9
oJ8V5+nsT7xfiZifGJy1xKLIgnMWRp0hiz2RF/wT59Qz49CLufM3YkHiQObW
425F0Kylno2+8e6HhI6iH9SwkRXvhX6MjvulURdE5tS+eoQOE8eDs9THiA2L
eIu+mXnolAz7tviOk5Fn5lhhYOY92It32jlznNKzcN7UM/bnzYn1waMxwc+Q
qIOwD/EG8deAkGFD0Og/ORP1IrBi/9w6TKx6f+o6w1YttoUZ4YvvSK1Xm7fY
lqeHXc+LWgr3YO9BcRY0Z4Mv1JuoO12aOl8nn8H3UXOYHj4Lfzoj7LQc+zQE
BoFF4NpDqesM27a4Pk2sTPxHu1fQ7AcNb+zHHXrHWXvHHOJT8hZiVMaQGbbc
GdiNDlN3Hxq1d/YYGvaLnPcJmpiXs4l7t8zML78DUGfifdG1EZnlTH1uZMyn
FkffopD/KYXv2KZ/7kv8u8hJuWO4ZSFnasH41empdZ14E1s+MXGcvkviehB1
obmF7YJ52B0+dk7Tj+9H25EYDxbGPs1Rp5qute/VjenUZq6vuxZ2Q92+Fp87
GMyp+fcLYqxa6pjzidz4VAuMaowWHqidJ2Ene8T6PSMexPcRA5DP8AbdUtd0
0JUzU8cg6Dp6Di7i+7DTfZv8ewPx1PeF+6nlnJq67vPzqHuQF/zw28ii4Af/
MDf8DlgCHoEn/IYE/V1h/w9+EwOAtcSfn4f+ciY6TB0JrBkbceLaoNdEzkju
2D1+Z3wTf1V37W913TEh+1EHWMHvT/r/BeYmthfqtb1T/wa2RP07Zo7NxkSt
kpiDeGN9/K63e+p6HvEYscWgsHf0ktwVftaTl9Qtu1lqm1LnmE/m/s1uZPwW
CS/jIz/7OPId8p7jUueHt2tta+bYjJrH2shHyEuok+HL0H9isRVhV/j2jb/V
lBxrIxNyFuwZu74ucf0HPt6JXJb8DxwDj8ClP4e/wk+Aw+MK595HFrZpcpfr
w4+8EXpCHYnfJVl/W7wputQccSU5DLERMdKXuf3C67F2v6jr/bvu35U2/qYU
ccKQwJbDq67XUycfFbV7fit4KeJt4u41Zd8d2/8qNUYS0/WO+ITY5F+Zdech
3fHe1PWu4wvXjOEbG0Cu7cFDv3gffNuEuDv60BI1pGmBpQ0xH4wB9zfGiJHv
jEiNcyuDN8aYAy5RU4N+JLXuU6OkdrGubtlek/her8abImP8JfEU+AWOLcvt
S+k7Lep+a+Ks1UGz9v8SCu1Z
         "]], PolygonBox[CompressedData["
1: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
xFL0/w/bGT1/
         "]]}]}, 
     {RGBColor[0.940264423076923, 0.7206610576923077, 0.4148197115384615], 
      EdgeForm[None], GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNmHuwllUVxl/O+W68t+80mamYQgEKYioopmiJgM4IiZbaqI2SU4oXhDCv
SU3GTTPEyXPAlPCgkwLljCCaN1BmyiOgchAUCTNxBKXpggh4Qe35+Syn/vi+
vd79rr332ms96/b2uWjid65sSZKkTX+tGpu1JDlVxP2iZ6ZJ8mmPJOnRliT1
PElmV5KkpjHRb4/mKxqXi3eP5t/Wc5fo3aIfF/246Cmin9S+v9Q+72nuN+K/
UHNt9ST5RPNPiOdWPR8t+nq9G6GxU7xTRe8U/02ie1W1Xjxb9Xy3nk8Uz0S9
f1jj2p5Jco7ml4jepfEM/VZrz/fF/7Toy7W2l85KNbdDvFmL5+fojpeIZ5qe
R5faT/TfM91Bv5+InpB6z6sr3ve5Vs9zv6bmyxbr5Tat3St6qeSpFUlyIzJp
bV2/YVLTlzT/gmSoS4ZBev6q6Nsr1vOF4lmqcaDGs6uW4XU9b5EM92mfG7X2
Xu05W+/6a3ym8Np54l/TYlugiy7N3yG6p/gnauMJ8Gj+H9rnWtE/Fv9HoqeK
/jCzrqeGPp/W2tV6btP8pLAvdma/TS22xxRsrOcRGkdJb69rblTsgW3YZwd2
1dwKnbVZ9GjRi0UPFs8Y/Y7S71jNXyz5fqCz+mhdrWpbYZd3wzbdGnf2tF3f
DZr511osE/JwfnvFMgyU/HM0btdZs0vjKhXdrbOmaO9JOqsDzGp+u/hmgF2N
t6BDvV+n/Vdp7C1ZqlXblzO7/08eZKkFvS7mWdMd8+DoGO0/SnPn14zvczT/
mMbJmpvf4vuP1m+mjl9dM71beju1apthr9GhK+b/LTkv0NxyyTmttPwtqfXA
fdAv8mNfdPhOZqxeCab07hrRC9FT3Ta4PvnfMzTnDI6z8I17Kj5vrt7fWTe2
NzWkb93xVY1fzs2zr8Z9CvvNprDvkNjnbnQg/rs0jg784wd7tWa8+FcH/1Eh
D3Ii05lam2ndX3XORv3+nFsv39C9qy2OJaP120fzR2jdpsJncQ62nFf3M3SH
xjl1x6Yy7sNddpWef0/jW9rnIu2/TePezPI/q3FyYV/Gp9kbP2dPZG6PPceE
HbkDvs0dc/Cm9edq7obc61g/I/G6jljLHdHn3h6OXSMDP9uDB10c12qZOxK/
HxU87Mczey5sJslw6WmRxr3CUl/dpQBXGj/Rc2/RPytNTykdt3oHtpdV7IP4
zNml7faa9pkg3s6KfRhM9QnfBBsLKrZfr9z0ARq3Z8bYJN29yO1bfTPHuQFV
x7pvlcb2+MyxBDnx38GF8f5uap31qxrX7MFasD0wYuOCwrbBRj10zmLtP6Rq
/8JWx1Rtg6ty63V6av1XK7Yd+gMb6HC89rpQ/FvEe2nNa8F8z9S4Al+Z5B1a
tR4ekvxn6rmP1h2id4u0Z3+NXTXHFmL08a2eJ+7/InXOIndVIj+e3nQc2xF5
CvueVLX/oBtwvlJnT9Ydn9O+39aZQ1vMT556oXDMXVs4rp8m/kladxY+V3Me
GIBe9Hwo9tHcg6JnIb9+n4TvvJw7Xt4rGccHDsAANHGKGLWm7n2mR4zBHtii
rjv8Qe8ulwwnap8/6d11GgfmrhEOlMw3CI8HRywl5o2pek9qgCfDh9dVvQ+2
G1c3zwb8R+vK8P85OuN5vTsajGu8TTyPiOeYmvMU+W6d+Lob1vXLGl9puLZY
3/Az9K54d2limxLDxiSO5fgeeNjWw7mLmmFd5AvyxuaG5fm4h8c86Hd6uMYh
XrEf/ky8Wl1ah9/U2rGl4/s5pXlZc1li/o0hA/gFx/+UDL/Pnc8Okv0XZT5n
kGqtRtQS1BRrqsYtfj2/1bUIcfH6hn3782f8Gz1zj6cqxmc/ydEpedqlz7c0
907FOn80N87n6P3iOJfzx8VZ+MOLVcdJfBlZx8X84LAn96J+OzpqqqExXqf5
h3Pfc1lu+78d/AtaHfd5vq5hvGAL9tgaa1fk9pEHSuda4tBntVzuO/xQcm4M
PINr8PZW3Au8zArMkKvJkexB/bgkzuhd2D8OLvy8Lc7dGTUMtcymmtci308b
jok8t/e03Yk11C/vR/4dEfPY+faqa7aVge324AdXrzXsk/ywGb45tu418ONb
b1bsl9Q4Kyv2cXIyeYH4cXPu+PZMZj1RyxJPOjNjn1p7T+k1u0vr/OmK9X54
m2U6rM1+g4/gK4OijqKeGhH13skav1jzXYjFXyus23sK+wX3wWcHtxkHv82M
cebOF/+Ghn0Sma4tHa92xzruDw8+fVbUsfQG8E5NLTfyv970Pbnvx5mx3hV4
nx8je6FX9gXH7eGzyDEx9f33a/Pz5pDtnsx9y5A2/6DnZ9G7hB9h2ycCe9RC
n/l8xDP4wTB5uz1y92mS/y9as1/m+pL8MzO3jtdHLLo6MxbIV8RLcLYq6tDu
iJ/kSvYhpzN2Bc0eGyLuTa1bF+jgzsxyYoc5meU/qs2YRG7O4/7oYVpmnLaH
fuCDf27mXAQWweH3St/1vcBaM/odaipo6pAPStdeH2p8pOm4R/yjF1wQ+sHv
VoTvkbeWR1waEvUnOXJIizGIfnZG3U+cfqnhWM99wT5nd4QeukOf3cFzXuKR
Nfu2en59rKUGGBl16ed9Bbn4itR63Fbat1dHrPh+zbmK/vTa3Hlsp3gn17w3
tdCd0SOTK9dWXYtQh5BDp9dcF+C7s8N/6dvAOn0f9cPIhns9YjM5m3hErdEZ
NPF7UtQYwzKfuzxzfBgfPQUYBYvE1UN1h/u0dkAZ/VnUgXfVLOv0yDG8W6fx
xcLxkzjaGzuK52CNpd4NFb2i8HeAeXFPakP0gk7oA6ifqJ3GZn5/kNbe0XSc
oK+l718evkJdSC3xQO5eiT6JePUF7XFkw7F6a2ks3yTeGan9mLzEPU6Ju1D3
k38uKVzjzK15r916vkL0Ho0b9Ttd9KuF5eLu1Chg8OrA4YMhw6yIHdRJxARi
5DURJ7Fh34btODJqBjDfzGxH+uZV+g0X34Gae7aw3x6QOadwzhlRLyyNHod8
S51NjjmgtPz7Uy9o7cnkm8J2Bmfg+Ui9Wyj666VrzJk11wTYmbgMXk7JnBPa
tbZnablTjf1bHZPos1g3I9Y+H/gED1fVfBZ4pu67K+ap8a+K+UGtXkvfOiEw
Se3eT+eO1vwGnfumfueJ3qKxT2l9D4z8Tz9MvTcmdV+8IfN3DmoU8P/N1PH/
u8LOiOgH6KWGiD5Tsq4oLRt+hS26It+vKl0/QpP3F6WuVfn2cEFqnG3O/E2H
897QeEbp+yyL/on7UIOjj8/8tsX19fK45+LY86XC8uK3yDw3sAX2V6XWEz3u
V0rjrZfG9YV7mYW5vw2UgVW+oxFHb05dx1C3nFxaly9GrcX3HeJFQ2vfzxxD
P4j+ABmICUtK18dLNa7MjQX6FXpT4vCgyGGDo8ZAl49F7KC+WBZ0Z+AIvyXP
UYdRC+2KuAyGf1S4t/yj5Oqj32Haa37pHoWaj1h6aeHvXA+lxiw9Jn5NbAQb
xEf8CRwfH/3LmqjnB+X2ycOjL38h9EAdujrqXmLAmqD5Xsi3J2TdL3ds2j93
3iVfPlcYR/SU9JvDc8fTl3JjZkXN8fOyzPjpivdP1Wx3/Ab/wWeHl54/qbRs
a6PfPCH6IPqhEaX3vDxzfFwX/emEwvQVhWs57kvMpR8Gd8Nyf7ei7jpCe4xt
+hsF3ypuLmxDMLsgcy4mJ+9I7X/00IdFv4Y+iVvbow4hzsBPrwEe2Af/fTC1
Di8u7NPMExOI9/RX2GJ+Yf/Fj/FX7sNdqDOJM+RfcFxGnno1dSznmxDf9bD7
8Vp7gn6PimdY6ZqxGXF4VtNnZ5r/VPg5RO/uz81DPgAznYXpraljLbKRN2/J
/Y3uVxqXpPaXywp/VyAOY2to4jD10rml66vzSvf6YJCcRa4gh6WR17gjMZl4
RZ9DjiEvLQx5uBM0dnq5ME//zN+VF8Q+HXHGI3wfE++ymusovm10BBZZw9pX
It7fEfPoAHyQm4kZ5Erwf2jhvmBA4e/YnIP8fQv3Of00HlsaD+CiV3xnIRfd
mrs/+XXojLqWuplafp+Qje8i9GD0Xzc2nQs+0tq/NW1rcgv1EX0mteaWpvv8
N5qutchV5Cn2uCF6OXLvuNAjuqd3WhPfGx6NuHBcaf2M4zt3YXneTh2HyGvE
op9HLqT24fsU36mmied3hbE3jzyfWi//yY2Rf9WNk/8CbmpeKA==
         "]], PolygonBox[CompressedData["
1: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
         "]]}]}, 
     {RGBColor[0.9703125, 0.79578125, 0.50796875], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxNVltsVVUQ3d53zz37XP0g8QFStAWURCOpLbQ1oL2RGFujGH+MrYZHCPTd
Jr5oMZj4VwRrtP1oSXy0tooxtMUSQCAmJpZoYrE8jA1SKGqkqAn6hbWulTUf
fuzsObNnZs+sPY+zbFPzxqaYc24eK471U+hcNRgHAue2g/4KvDXYw6xzE+A3
R87Ngp6FcDf4lSZD2bU4G084Vw56A9Yt4Kew7wXvKtZu6GyHbiv2VshewfoN
/CbInIpJjr504vsf0B3Yb8V6CLxZ79xG6H0G/l4IVUH3COjr8PO5tOgpyLWE
uqsZ+7GU/NkP+dfjuos+zBc4twSyWch8BN3lSefykPkD3ztA/4n9Br5Xg34G
+xboVIEeg85CgeIKINMPew8kJXsBa2VSdh9LiSaOk7A/Brl3Y8KRWFXA95aE
YjwI22WhZEqxb0Y8k5ApC3RvA/jvQPe1uHQu4mwf6OvEAfscbM2D3gVdlxBN
m6Vmc9Rwao8Ln3XA8X341hbIBunhuDCkXdqcSehe3j8SCIOfYe9JyBQitq1x
vTGxrcA+CJvbwNuEt+0L9I4nwFvIOVcLna/hQwi5HvDPgF+J789hpxz7h172
XoDupaxirImUI4yHWBxN6Zt0HvafBf80ZOdiegP6x7ck9rFAb8M3Yg6egv23
IfMe+D1x0TDvfodOL++KyQ5943t585P+MscX4tKbsByi3edh8yRwq8M+l1Be
8Yxrt8lUR3qzVvg5ahhegnxzRvhQLpdWjlVC/oOk3o4xM8fz+H46LmyIOXM4
k1a89PeNSDk2FMpmS0a1811CcTG+KKu6Oo57J0LlQD145ViLQN8A/yXw/4L8
y9hfwfob9KvYXwyVH+N4ww2Qr4B8Fnf2peTXoFOtTJv/92fkN2u0zYt/PFBt
ETtiwnxhPIwlfbNqZgn7QSgc27DXw05DRnk+Bv0a3JeCD29iFYO/J6ccqTeZ
c/juhs1O2ElAdlVGvg2k5BP9ITathk8X5HuwL8ddZdAJcX4b6IJIfJ6vtppm
XFP4HoHMW1n1IPaiBi8fG80H1g/zn7VNrIm5h/yPgXwqgY2t4F8EvzNSDk7H
lIf5lHKJZwe83voT7DdlFPt9TvtkUvSXoXrRPZH6L3P0EO6qSqku2MfKrIc8
gvOzsFWNsx+83oJylDlkPfxb7Lsi04VeHdYAdIuwVwWqKfZL5lO1+VMIW3tg
axn2dE7+8a1YN+x9rKNiq88dkHmUdhkj/On1woTYxFOi+V5bvPKhLVJ9NNt7
/RKo/63wymviRazaA9XMevCHc4qXvfO8V01f5l1xyzGnHKFN1t2VQDNkKe7a
mVXfeypSnlCGsrzjpM0Fvj/zjX31dFq5xX7Od2CPpH93edmk7f2gu3C21DDn
jGENEAPWMHE5Af/y0K3B/Ssj2WCsrBv2BebevZHuWhUJlwtWN41e+VDPmYjY
r0H+C697rtldA16+rsH5ilD1yzr2uONx2L49VL9m3rZH6gFHbKaMh6oL1kfK
3vecV38iFsSBvYf+8K3Zm49aj2IdEr+1kD+cUp8nVuwN7BvEiLLHTJ45xdzi
m90N30rg8xBr0Ss/gkj/HIwpy/lgs6EU5xHkF0O+J9L/BPk8b8uq97IHD4Sq
tcVZYcl5TH84G0mzP3RYDvyLWBNYQ+DXeuXEPjun/GGLhe84Z7GzbpgreYuF
dcsa6TU+4+IM6bU5QryJCXtFI+zPgW6K9AY825zVrOW84NwgjsRzNlI/HrYZ
zdykn7y3I1KMjPWyV/8aDVUzzKtfYWckUqzFXjOZ857/A09YPjAvWDP0dwb7
+rRqnP889Je+MfYiy3PmO2uixf43aK/2f/8Qw9YPG6zn0486k5kyPv8neFZk
PaffKwdpiza+iTSzJqzPET/2TOYR5xD9YP2wjqaxD4ZWb6Fw7U8Ke9Yp42Es
Mxbjp7jz+5z6+Jmc5ip7PnEv99LdFkifNN/vjlBzk/OzAzqLoLszp/nfbbOf
c4I18rBXfjHniHuhzc47sa+LVAMf5zRvOQ8Y24NeNVFi/bXL8KePxHrE/okO
2r8Q7yDvKuydzal/nc/JFv1l3+M87LMe+x+QyZQE
         "]], PolygonBox[CompressedData["
1:eJwtlWtolnUYxv+9z7u9797n/zwvEkIndYKb1qBI1skDShtCtFUs/BK41JKZ
ujkndPSAQd+qhaLugxOyprMUcUaLToogpCA0y0Mwykyhw6LA+lQ5fxdXH264
7ue+7vv+H677/8xcub6jpxBC6MWK2PQ0hJbaEBprQtgfQyhXQrgfPEjwVvyj
eQiLS3D4dhL/ShbCUgrMxf8J3EN8gvzJJIRr1JqFPYa/m/wM/lzqPUX+OvyV
4AZyOuD2U2MWuARnG/5vxHvBFeolymdtdeA+cvbR6zrxF4mvj+b2Y3uIfUiN
+lr3UK/VxA8mzllErBnbWzDnELg7euMb4LzAWmfkXsse4vXgS1XWUQ5hO/GL
4B74v8KfUA74wcy5qvkA+AM4n5E7RtmD4HZq9MLdCqeP+l+ypnHWsgb7g/yz
5LTCH4CT4yfEy6y9k/gS8HlqrKP/CPnfgpv41krsCPx74X9B/u/wD2AJ8WH6
NYNb4R8nntLzdMGcDuLfwW+jXzvfLoH74VdLXlMf/jH8j4q+kxHw+cx3NwG/
gVoF+k9jb3Pgv0F8OBrrjnXXW/D/g/8e3zbCfTT6LI5SrwXchg2AB4nPo/ZX
1Fim/WKnwWepcZU4MNyoC2Eh/H78U/gLdNe5z0I9JsBN2BC9z5E/RL2X4fxV
dI5ya7EpwZqStlL488ENnOnbnEczVqz9X2OZNSvtag1XwX3Rd/06/hLwq9jf
+Lvxx7TW3NqQJq6B/6HGVPyp1N9E7SfhNJXdY4DYaNXafQfOa8QWZz4raVBa
/DNaG4/z6QnO711sR9E9X4nWiLTyNfY0uDF6NrSn2dEzqlmVhqSl6bm1rDVo
LTPp91aNZ1izfB3Op0Wf2Uvk3hHdW3u4E3wRfjv5t5DfmHpmNbs/Yl3Ej0XP
vjQkLc3HHyX2OTmrU2tUWr2P/F3s/XK0ttvQ0w/gzeRcBj8DZ0vuHuoljV7I
rGlpuxXOvorvQHchTUe4nXBO1HiGNEvL+bYq8Roeod6hint9jz1PfC3xjYn3
3EL8Lvzxgs/4DPGuirWpN6yb+CDfhjiPN/m2F/xw1VrbRc4vOgu+LSQ+Rrwb
PJ569pTTWbHmpf1/qb8ZfLji2dOeV8HfFB3TG3GF3OOZ37IzxPPUe9beh+lZ
pPft8GPinreBfya+s+A9v0/ussxcncmz4Oeo0ZX4DdRbeHfut1s5c8A7iG8o
+427QP0ZmfcqjdSD58H5mLP4BFsB90D0v0EzNVnnO9Xdagbv0f3nnlXlLADf
qFrrmvHJqjUhbeiNXET8XOq71z9H/x6dqc5Wa96vt0d3VPKeR+m9NvNZS5Ml
6q3J/DbpHzRS8Rq1Vr1hD8Gflvru9ebo7dmO3132m/pN1TOsWdab1kL+TQHg
6Fg=
         "]]}]}, 
     {RGBColor[1., 0.8711538461538462, 0.6021634615384616], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJxFVklslWUUvc83te/9g4nBIaEYrRRfiSa0dYgJCguQBRvrGk0oSaEJNVYk
FgfiUmtF2gZFkYVRCcPCRI3pwhhDaaxJIUEGd5QCCYIFS4wutNVzco5x8eW7
3/ff7w7nnnvfu2/zC939t0XEJFYRq1GKaOcqRNysREw0RZzG/eo84nw14o9a
xDzuD+J+OfS+xKMzOHdA/36cT+C+F/L2LOIa3vVCfwFrDG+fvD3ib8ijkFdD
3pdELClHvI/9XFX2T+HtljTiR9wfg+62esRV2N0OnSJi6IKvb/F9HeQL0P+r
prdnsXbi7adlyYxnqCqdw5D34/1d+PYh9r5mvaEv5nK0Sf4S+PoevtYnOh/B
/Sbv1FkWyuMi1t6qsDlufDbizRTetsDGE6lk3rWWhAsxaaPtknA7Bp0PYLuL
ufj+OuwsVHSmrzPIsR/2z+bKaVuz8jqP8wDuf85Vrw1YD2I9bZm1++88EcJ7
ButdrLexDsDvVuhcQawD0OnPhC9xXpOqhpPO6wvXnfVfiu9ziA+li5PYx6Dz
Z1FcmHJeL6Eeq2D7jeT/evBMjlDuMK9on7hsxD6NcwP371Ul9xS0n7TMGBeL
4hPrc6OiWMidQWKFtRbYrGlWfsSM/shN4ka/jIU1o49DBeF3CjpfFYXLMNYI
7j9H/nfi/peavhOrzoKw+a2imFl35rC/LC6xLvRDTKk/izgfSfX90VS1XWd8
fsoV1wiwP5fL/yjkJRX5Zb0mbZ/4k1+0Q66Ql8x/AHuOc1YWLsSJdSBW45Bv
VVR/5sTvjxVke9z2X0duu/H9d/gdhPwa5Pm6OH7EvfBZqphWZsr7pnNnvMSF
mCwi727cTdfVl9+VxQ3GPOG4u3Nxpl5XLIyZ8Vw298hB4kL+sL6cEeyxW5lm
BLk7n6mPWMNV5saOgjjzFOKcxbetieJnP7N3WkqqB2vBvt+F8wPmUV9BvojT
rHtng/uFMmNkXozzn1w8X8wVb27MyRXiSx36Ih8vhfj4jrlw1b3PmPdUhTN9
M45WzwRyltw97Pmw3Di0Ol7mTE5Tr9Mzba15PlJVHYkF+coaP57r3S6/zYDL
vbA3nQoj5tsDzDugfxz3R3H/SU3143zdh/U17h+G7lxd+byM78943nLust8G
jS/nFTFn3OwD9gPnKudrn/uiiPcPweYdiTBYYRzGzVNyss33nIGsL/uUeY16
bhFv1qjh+Tbse9oZ8zxmXzdcw4b7fcR2qLvH+jusR51Dnjs93vdanzUetj7t
zVqfdWa9yasLiX4fZhLVudW1Zr+3OZc+1/Wa+/qE516L5xYxbHde9Fvybxxr
ssx6lzz3ltovz5TZa5wrC8afdVgw/3sT1Xcz7Nyoiw+vQH7WfCAvfkVfvYUc
r2eqy91l1eBAIvkj7M+n6utNqeYo9ZnjFbx5E/LlTDOPMmN7MdHen8g3YyDX
Zow/63AQ3+7Bm48TcXnIv9G7/d+DOHBmdPm3htxlzM+l8kXud1qfdtrdc0Pu
uyH/zlF+ta7fmG+Aa3smbpPj5DfllYhtvflJnq5w7Vi3qUxz9YdM3KVOU02/
P3P+DbpojpE3OxNxZAA6/wLDbjqf
         "]], PolygonBox[CompressedData["
1:eJwtk0tsTXEQxqfch5xz77k29VggEomoWEhKEAk27cZC774kJRoLt9pyKS2x
FBJxCUp15RHRhIRGLETEBkl1oVq7VluJaHtfXgvP35exmGTm/818M/OdOStb
2rK5eWbWiMWwpshsKGG2c4HZidBsd9psBe/P4mZ78JvT7teTE8uYLSPnFYX9
5CcXmlWpv5Q0u1NjdjQwe0n8Yz5v4H/JzxF3kP8ZzoP4J1Nm68k9Q80s8S5y
7hKPEzfh38eGiceIH+A3Yh+S3uM3/FP0Xw7fFHz7iWci57rJjDuYtR67it+L
bcB/T30HszxiplH8a/RfDLYKjlm4vgfeaxTbCl6B7yJ+gRnyYFfIr43/70n+
WvBatBikf512A38ONkncjn+Pni/MZxjA76bmTcI1ltYdcK6Be5KabeAT1DST
u46aBrAe8ocTPvMY82wn51PMNesE35j23UrkHIKviJ1j3i5y5qhtDVxrfaMt
5JbBC0nXUFqWiM/jT2ANxBeoGYErR7+RjL8Jkwa/4Hqa9m8/h2XBNhP3xX1G
zfqNnDyzHadfkfhI4LNIs8vsdixwTJr3EudSrtVp+D9Grrm0F4e4dFO6rYo0
iPyb6ttqRs36OOO3Kg3zcIWhz1bE2si/wdtS8k/Rswe+Mvhq/CW89YF9Ia6L
eU4/8fWUY928dQV+E7qNVvgPE09HPqt21u4l8BlzTnFXQq+VptL2a+i9pbm0
1w7a5TX1+6h/l3GtH3KPb/E7wavgT7AWajfxtijhN3aL/D8Z/5d0Q7olfXN9
+zLWHvnO2l03mAqdQ1ziuE39QOC9dWPj7FrV/jWugbQYxCKwDFYA/xn4v3gW
m4v8TZj+4enQ34Tp5nR7mkGz6EYPgO8N/ba1k3YbIs7GvId6/QMaD6zY
         "]]}]}, 
     {RGBColor[1., 0.95, 0.75], EdgeForm[None], 
      GraphicsGroupBox[{PolygonBox[CompressedData["
1:eJwtUTtOA0EUMxMkyGy0OQM9R6ANtMARKChBaJOwKAJxChDfDgmJAhoI3ICG
ihMg2vz5NICEHY+Up3njeX62swsb2+tbAcAiq8I6rwGdWWCUAcMceODjmP1d
HWjMA7c821Vgl/XK+b8IdDmzQvyS3ANyPzh/xH5vBmjxvcd7SfyU2AnrmnhJ
fMD99+T2c+tJd5j5LvyHM03qtFiPwTrSfiF/P/q84L53cnbIPZYm8RviZzX7
kJ8Jz6tg3Tc4U1H1nHZLQ1gz2qf8Kt9TcMbN6P3SKdI84049KiN/0/zyN8rN
lU/d+5nnlFW8Imk9B+PitqPzjcWN1p2wHyTfX8QOK+7lX3f1S9RcrnufvtUa
+94csMqzTN+om+Y0/53+T2nJv97LlPM3eo/2KYN4n9T/B+RZWbg=
         "]], 
        PolygonBox[{{2811, 693, 712, 3909}, {3227, 427, 1147, 3228}, {2680, 
         424, 677, 3054}, {2677, 377, 693, 3053}, {3057, 694, 427, 2681}, {
         4157, 2421, 694, 2812}, {4158, 2424, 695, 2813}, {3060, 695, 461, 
         2685}, {3223, 1137, 377, 3222}, {3901, 896, 2117, 4016}, {3825, 696, 
         2421, 4157}, {3826, 697, 2424, 4158}, {3909, 712, 2028, 3921}, {3226,
          1144, 424, 3225}, {2806, 677, 896, 3901}, {3229, 461, 1150, 
         3230}}]}]}}, {{}, 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], 
        LineBox[{2662, 3043, 3223, 3222, 2677, 3053, 3822, 3821, 2811, 3909, 
         3921, 3920}], 
        LineBox[{2676, 3052, 3226, 3225, 2680, 3054, 2805, 3900, 2806, 3901, 
         4016, 4015}], 
        LineBox[{2678, 3825, 4157, 2812, 3910, 3823, 3057, 2681, 3227, 3228, 
         3056, 3055}], 
        LineBox[{2679, 3826, 4158, 2813, 3911, 3824, 3060, 2685, 3229, 3230, 
         3059, 3058}]},
       "200"],
      Annotation[#, 200, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], 
        LineBox[{2558, 3021, 2997, 3218, 3044, 3045, 3694, 3693, 2663, 3386, 
         3148, 2845, 4103, 3698, 3428, 2732, 3295, 3296, 2630, 2563, 3091, 
         2568}], LineBox[{2603, 3118, 3990, 3626, 3627, 3493, 3896, 2793, 
         3494, 2914, 3699, 2915, 3176, 3391, 2674, 3190, 4023, 2939, 3665, 
         2940, 4094, 4095, 3784, 3785}], 
        LineBox[{2962, 4051, 4053, 4052, 2961, 3393, 3819, 3820, 3198, 2675, 
         3392, 3181, 2921, 3697, 3696, 3382, 3381, 3380, 3500, 3499, 2610, 
         2658, 3175}], 
        LineBox[{2963, 4054, 4056, 4055, 2941, 3385, 3812, 3813, 3182, 3185, 
         3186, 3142, 2828, 3695, 2827, 3922, 3517, 3843, 2722, 3844, 3421, 
         3423, 3422, 3533, 3086, 3155}]},
       "175"],
      Annotation[#, 175, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], 
        LineBox[{2574, 3735, 3255, 2871, 3097, 3096, 3556, 3436, 3437, 3435, 
         3847, 2740, 3846, 3543, 2854, 3542, 3545, 3544, 3299, 3297, 2733, 
         3429, 3709, 3710, 2628, 3026, 2846, 3238, 3239, 2559, 3082, 3143, 
         3078, 3079, 3184, 3183, 2716, 3519, 2830, 3518, 2829}], 
        LineBox[{2595, 3752, 3263, 2893, 3036, 2654, 2596, 3485, 3486, 3359, 
         3360, 3361, 3761, 3266, 3625, 3624, 2791, 3367, 2792, 3492, 2912, 
         3641, 3130, 3131, 2920, 3647, 4010, 4009, 2659, 2615, 3138, 3139, 
         3197, 3196, 3042, 3661, 2930, 3660, 2929}], 
        LineBox[{3708, 3237, 2844, 3530, 2721, 3193, 3194, 3025, 2627, 2557, 
         3083, 2562, 3717, 3240, 2852, 3085, 3084, 3541, 2853, 3434, 2738, 
         3302, 2739, 3554, 3555, 3251, 3727, 3442, 2750, 3311, 3312, 2638, 
         2573, 3098, 3099, 2874, 3579, 3964, 3963}], 
        LineBox[{3788, 3273, 2923, 3651, 2803, 3191, 3192, 3133, 3132, 3177, 
         3128, 3643, 3644, 3642, 2913, 3127, 3126, 3763, 3762, 3365, 3364, 
         3362, 2789, 3615, 3616, 3614, 2895, 3480, 2779, 3892, 3479, 3594, 
         3593, 3980, 3110, 3111, 2887, 3595, 3982, 3981}]},
       "150"],
      Annotation[#, 150, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwV0L1Pk2EUxuHTOBgR0QE/sDAwaMDo0pBgwkIT4mC3TspigpMLyD8AUWsF
ApOWRDbtRJ1cHBsdQK0s2C4ao3zEEMKkQ7/UxKvDL/c597nP87zvMzg1k51O
RMRj9J2MuNkdcYF+PBWRpO/pRfqBnjD7RLdwF6WuiG+8V7Sqr2Fdn++JuKd+
zf+pP0BGfRxn1d10VeaNesTZ5+k51O00MIeKzN/OfXRePyZXRvJMxANezuwh
7de/4D9SP+Xl6ADvLe8Q0/oJflPdwib+oI1j/Oc0Jb9G81jmraCiPsKs/f3T
Ebd97yRuYU+/i6J5U99CG0/sLckv0EW8M/+HBV7CHYu0IVfHD/vfccO84P++
mPXSr5236by5TB+uOucasnKX9AU7z3BH7gpeyhZxGUMYRlluw851Oopfcin+
b1qiad440jJVfMY27rsjw9+hu6jx/gOiu1Ek
         "]], LineBox[CompressedData["
1:eJwV0TlInFEUxfEnDsEZl7GwENTIYBO3qExvIdiJiqK2EoIG14AEwdJ9aey0
kXHpDFiprVq5BKJNggiCpFCZTlwqi/y+4s+599zz7vuW1JfxrrGcEMIiRvND
GC4I4SttKQphiJ7pL9S/0KxOJ0I4UtcXhlCHGmR5DbxGfEaPc1v8e34V3UQG
KbMaO8ppBcrQLlvN+4SUfIYXl83DB1zxlmgn/yAZwiE61L3RPbjVz8m823OK
HHsCYmiPsniVe8EzcmWy+O5Mq8w4LS22gzeLTaT1GTpltkab9Ot0BsvOrOBc
/YhRmTt3jNAH++8xzY+h0rkF/k/1Lur09ajFD/2EPfPmH/Xb+r7oOXnPeMKR
2YR3X+Un1G34I9eAffMDxHkl9EZuEN/wT7/HH1BXyv6OviMucW32Fzvm/fpJ
u9/i/q2+23sk5Y/5xfSEbvDzojz+A6pxSFM=
         "]]},
       "125"],
      Annotation[#, 125, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwV0TlPVFEYxvGXREFwABEDlmyGAgkkWtARErZaR2uW0BiDFJDAJzCxYGYg
FDSGgiWsakFYpACRRoMJWtjwAdwChoZGhN8t/vm/5znPOXfuneq+F48G8yIi
h/KbER+LI+7wAb8uitjn29YfuIzTpRGt8vPCiLGSiFE8lT3BrPx7KmKOe/W/
4gilshUsYwn17vmGLr1reOmOQb118w/7P/ELE/Ih9zbrtt7yG613dc7s7fGw
My32euWr3G7dgU4M64zgjXyK1zjLb5N3Q637JtyRk01ynfU7eZ+7tpzPN2/w
dd7kQt5Hld64/rhzGa62XpH3OLejd8O8zQX8nouSb4oavax+xrkc//Ve8/JT
nuNL5//jArPWJ/I2fpV8Q/2C5Htysf1ueYpnMC0/lldwJe5iUX5P1uRZzUjr
35c95kbulz3gh1jQ/63bwH/4n+deYNfeXtKRPdP/Yj7EJ/Pz5FubB7gj+e/4
s/zIfAVxKFJo
         "]], LineBox[CompressedData["
1:eJwV0LkvxEEYh/Gh3HUfS0GQOCoScTUKiUYQEVEo7C4qFDY6taujUolIJI7V
oiRqhaOzIVaEP0BBJcTnVzx55n3nO+9MpmkuM7FUEEJYQU08hKGiEBK8WBLC
Bc/zOS/wiL1kaQgpTGMGaZzGQni294I81mUL9Matt623cGbdbk4Fl2PJuQze
ikOI8aV8nK94Wa9H9ot7+Ztv9H+c+8Ufds2s5zv9VV7Do+ykugoN6kZc6+Uw
pVeLlHNZdZJPOc3BvYPu6CjzD3pj0fvVhahzptmcFmxiA08yz9iX25HJyVRy
NWr1Ru0lov/iGu43912mzz0fvCfXpt+KbvN6kJbtVaf4QG5WrhNX0TvlP6Oa
u3BiP4tDHOMIA2bcR/+BW2TMGXY2z6940PsHOGQ+vw==
         "]]},
       "100"],
      Annotation[#, 100, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwVzz1Mk1EYxfFrggn9oK1DBzAObE5iCYYODLAIjGK0NtShBTZjF6GJrg4a
2KsysDGAQlDihAurJppAgprURWjB1o2hOvF7h3/OPec9z3PvO1ipzjy+FEKo
438shGepEP7RkUwID/pCyNAiLWAtLkvzKCCbCGFc1tV/aq6is87/SIbwE/M6
CyhjDhVk5NvYwjtct+MQU+Ze2vECVXs+8m3fO2jxpzhBTrdJ8961r5O0c5Gv
YUK2RLt4Ys8iPuun5V9okqbQhzG+l8aiGb0EjeOTPNA9esf+KzhxRxPHOEUL
S77v0Pc4Mv8d93Sz+CNr4wx/0UFN/wPdRUP3F4q6/Sg5X4tm3TvrvOefx/Uf
0hKem+mRX8ayfxviD/RXnKf1UvIM0mhEO+UDuIoN2SbK9lRQ0M/x9+kwXZC9
su816ljFm+jd9tyI7sJN7Ovekj3Sz9Nv/Fe81d3EuWxU77bsN+b5SXo3ereZ
C493Ufw=
         "]], LineBox[CompressedData["
1:eJwVzzkvhGEUxfHHmtgHhc4SShEh9q2SmEZQkIwlYq3wCURiqWgQlUZjaUi0
BqWoqXT4AMQgQWy/Kf4595733PPkrZhYGJhPCSGsoT07hGn05IdwnBfCCZoR
Te4FdtyYb9Eh15VLzZ04knvmtck80Rbairhv56jljWOPN5ITQgNvlNbrqEOV
vd++q+dRrlHuge7zSyIhHNAt3iYOzUVyhYhgG1solx/FnZ5uXOi9RBmvko4h
4f4VL3jHW7JPNsMbmUhFOtKQ4p1VvWtYQbD/0SU3pbp+zL/4RpeOId4gIt7r
w5f5E9fmRZkd9y/0FQnE+Vm6zmiT9+55NXrmeP3uBlBtP6XrbjfQaw7yK+Zl
fMp+4IiXkfwX2qDrStewPYaomynZaUxiFjPYk43JjaDIzTAtpt9Z3vY91d0/
Ex5HIw==
         "]]},
       "75"],
      Annotation[#, 75, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwl1FtMz2Ecx/GnC+SQlI0thWosh81h0xZjjiOb2UIjNptZ5TBsXGCmmrlB
ZMNFha26tOWCTk4XUY45DJsO6laIK6Ebr2cu3r2f5/N8n+/z+/1/v1+Zew4X
HEoIIUz1535yCGXjQ7jHp7mHr/FrdKFuQghXuYyPcqv1NrSgG59wRb5qXAgj
Y0NImRTCB7UNWJ9kTT5Ltsy41LhEfab6Yp7J62QVE0MoRxmyZKXWGuX7ea75
Pp7D+bJROKfuiH7Nxt+dM4Sv5t/wBYvVDnKec9vVJNl/3PwkTuAP0u1pQyta
sNyejyhQn4oUe1Lj/TmrG4WyKZgRrxv9sgEUydJQpMfO2E+PA/IWPsi7ZWfV
jzYeg0pnLzR/b89F443qUuSTkYrP8nR5Bqbjlmy2bK8+8/mu+R202fdXn+08
wve4Sd4cz0ax+sfcjjrrxdZX+j2+mA9ihd455tV6Fhh3qO9ErvlLzuPH9j1B
OzrRgfP6POdKfsoX+Bkvjfv4kvkLruJXfJHf8jt04Q1eY5n6O87dim3YghpZ
YXxO9tSrKeEnrrUDnchzXTfkRfLrvJNvch/X8o74fsbfBgv0WqQ+yzgb1foO
yJbEZ8d1sinuv56r4nWjwThZ3UQk4TKq4nNQvwvn1axxRqK6tZylfybOyOdh
PnLiOxvfV1QgA9ORhnRMi99ZfG727cCK+O1xjZ612Gac7KzN+G08HJ+L8an4
LVkf4p/4gVZ5YvwWOde99MsOmh/AZvt6zfvQg3nO+czZPGy9mX9xE29S+9C4
3PhBvG5+xPv0zbfnKieYbzC+jcb43FxLr2y1tTfxXUCFPuU4Nv7//5V/8Eqc
nw==
         "]]},
       "50"],
      Annotation[#, 50, "Tooltip"]& ], 
     TagBox[
      TooltipBox[
       {GrayLevel[0], Opacity[0.5], LineBox[CompressedData["
1:eJwl08tvjFEcxvHTqVs61WmiRVm16ChpXbpypyzohbokEjZiSULc1biMJjrT
IhYVRij6B6AqrKvKitgoETZEsLHUUtLxeWPxzfP7Pec5v3Pe981buffgtgMF
IYT3OJkI4TiWxUMYmxrCitIQXhaFkOCV4jwvjTPqMpRjGmZgOtKowhxUYh7m
oh2xkhAKUaeuxWtzO8xqcFaHPosMhvlF/DiK0WtPFW9PcQhJel9/Dxcmh/Cd
rpJJumfOWot6QO4p5uuf0Vo6RAed80f+Ly7yrvIu0XF+Hr36u7jMy+oXmZmh
Kd5p3iz9TX0PbuE2Yqjgp6z3qzuxWN9FC9DkeVrQjDGZNfQ3XUvr6CP33YJW
bMYN3lbaZm+3TCt94L59qLG20F3K1OW4IveOVy/3li6hS9GFTvTITJSZgEJk
kcFs2d34bP0TkrLV0Tfk7cRH3gdU8GZG35e3HcHevPNfqduju8rkcEqmDS/4
JfQ5Xe4d/JA5pj+KHdE3oYMYwK4pIeyXa5a5TmO8JnU/HuIJ1vM2oAHromeM
3kN0D+9kgfl59Tf1V+TMT+tH1Q32jtBz+jv8s/SnfpxuNKcRm/BLv5qO0hrz
Hts37Iw3aORNQhn/ixl9aLR+jVfNW6nepz5s/xEcQr0zWnhxdJuRkhmKzrZ3
BCcS//+vfyYyb/0=
         "]]},
       "25"],
      Annotation[#, 25, "Tooltip"]& ], {}, {}}}],
  AspectRatio->1,
  Axes->True,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{-4, 4}, {-4, 4}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6315352761243553`*^9, 3.6315352841529717`*^9}, 
   3.634049227883463*^9, 
   3.634057415694414*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztfXuwXVWd5vHem/f7/bpJbh4ESAhJyAtCHjzkmQAhPAwSEYwJMYOAAUEw
hofKw46Cojalti0OPTCK4iDatJ3WthmHfkx3l2M52KM9Vg9jwVR3FVbRVXQV
f+zZ37r72/c763xn3bP3TRC7u8oc7t3effZa3/49vt9jrXXRdbfu2/P+6259
3+7r+s47cN3N+963+5a+c286kF/qfluj8bZ9+NfXwM9Zo8GPLP9f9j584Mrg
P88J/+lu7N27N/yEf1vxOQyXwk/h/7y4vHapuWNY+y/b1u4BjWFN1/APv19s
/n5H+0dOwn968P904afh+Onc8lqPufHCxMMvMX9/Ufm9w/sfOSPxBdvNF1xQ
8e+3Jf5+RP8QZob/9DT9SZtXc37i29zfb/NfXTx4VnQH/ntR4gkpsFP3xS9C
5j4b/+kqZTL8zbbyp0vKny4t/25E5+rQ7ueJ+E+W5V+2Ex9vk6uN7kxn0GOu
TTLXJg/h74Zy72/q74Zybzc+3/bvwP/2AH/JEK5t/60ayJjisv5Rl7nxyXbX
6nzZyP5rPW+88cbI119/Pfw2rv/a2Ndee638u/Hm2iRzbXr/tfK78G+h+bul
ZizL+q9NfPXVV8trCwbGFz9j0LGM73BuI2Pw+t9NwA7/uppJQfg/h2W81pNl
r/0gn8lzT38i+6tnPpxlv/xCY2z47M5e/svD2aMHt2f/8lf3NsaHz+7sn//8
7nDt77/2nsak7NfP7c+v/dN39mWPfODM7MVHtzWmZ//vD3bk137yuQuze6/b
lP23R3Y1FoTP7uxPDu/M7nr36dn+XVc0Tso+f+8d/Qjip/Db0vDZkz108Jbs
tp3rs8/eeE72/Kev5u3f/vhl2WMHTst+9dVLy8c8c2hL9uwnLgkD4XD++OHL
sj/8/LVNw/6H527LvvTANWFi44rpfeXwddlLP/taAKALn939gAwg2e8wvWd2
ShaudReIvvHqkeyB23dkb/zi0fKRTz6yJ/vx129sGtqffXlP9o2Pb2uaAqb0
9MFNYZLTiqn+79+7OHtozynZ9z5xZYnoY7dvzW65Ym12z837GssNossKRD97
9+3ZzdddHVD91kd38PbH79yW/d5N65sek6MbHvN3T1zb9IIP33JB9k8/PNiY
UAz7P953ZfbikXubBAa/P/mVQwOIDo9lc2SBU8SqBgXzhe9/LnvusZtaxPOz
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\
\>"]]
}, Open  ]],

Cell["\<\
Did you see what was different about what we fed into ContourPlot? Here are \
the two commands right next to each other (evaluate them):\
\>", "Text",
 CellChangeTimes->{{3.6315353545392075`*^9, 3.6315354204563174`*^9}, {
  3.6340587891019683`*^9, 3.634058793987248*^9}}],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"9", 
      RowBox[{"x", "^", "2"}]}], "+", 
     RowBox[{"4", 
      RowBox[{"y", "^", "2"}]}]}], "\[Equal]", "36"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6315354302291536`*^9, 3.631535430997691*^9}}],

Cell[BoxData[
 RowBox[{"ContourPlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"9", 
     RowBox[{"x", "^", "2"}]}], "+", 
    RowBox[{"4", 
     RowBox[{"y", "^", "2"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]], "Input"],

Cell[TextData[{
 "The difference is that in the second case, we didn\[CloseCurlyQuote]t set \
the expression 9x^2+4y^2 equal to anything. So, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " chose a bunch of constants and plotted them together - with some pretty \
colors. If you haven\[CloseCurlyQuote]t yet, move the cursor across the \
picture to see which constants ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " chose. We will be using both of these versions of ContourPlot in the next \
technology assignment."
}], "Text",
 CellChangeTimes->{{3.6315353496467857`*^9, 3.631535351390005*^9}, {
  3.631535446748709*^9, 3.6315355737405415`*^9}, {3.634049767062463*^9, 
  3.6340497905004625`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Programming tools: Modules", "Section",
 CellChangeTimes->{{3.63153520230672*^9, 3.6315352055059576`*^9}, {
  3.634049360791463*^9, 3.6340493635114627`*^9}},
 TextAlignment->Center],

Cell[TextData[{
 "Next, we will write our first program. In ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ", a program is called a \[OpenCurlyDoubleQuote]module\
\[CloseCurlyDoubleQuote]. The following bit of code defines a new command \
called \[OpenCurlyDoubleQuote]levelset\[CloseCurlyDoubleQuote]. It takes as \
input an expression in x and y (called e) and a value (called k). It returns \
a picture of the level set of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", "e"}], TraditionalForm]]],
 " at the value ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 ". "
}], "Text",
 CellChangeTimes->{{3.63405897007432*^9, 3.634059107172161*^9}, {
  3.6340611655448933`*^9, 3.6340612578351717`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"levelset", "[", 
   RowBox[{"e_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"k1", ",", "set1"}], "}"}], ",", 
    RowBox[{
     RowBox[{"k1", "=", "k"}], ";", 
     RowBox[{"set1", "=", 
      RowBox[{"ContourPlot", "[", 
       RowBox[{
        RowBox[{"e", "\[Equal]", "k1"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
        RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}], ";", 
     RowBox[{"Return", "[", "set1", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQfeLuCq7fPa8c3RTvqIDoe64OWiD6nUuNNYh+oJkZ
DKJ/y4WEgGij+/MiQLSaQE0siO6aIFwEoqccSSkG0TdcPjaCaLZbn5pA9Jaj
+t0gunHRQjA9aSn3IRDdsH/tMRDdp9/rIt37ylHR4acHiJ5SeTgWRDMv408G
0Ww3VFJlgbRBLVMaiI4zbtmZ2f/KUS5t4x4QPenqR6YsIC1yroQVRMelnGXM
BtJnztowg+h9L5YFCE945fi+zjgKRPvLiieA6F2eEakguoxlm83Sqa8cJbye
gOld/U7OIFpJcQmYPrfkPNMyEL1VnQVEAwCHS57f
  "]],

Cell[TextData[{
 StyleBox["Here are some notes on this Module: \n\t1. When I define the \
module using the input variables e and k, I follow them with _\
\[CloseCurlyQuote]s. However, in the program, they are referred to as e and k \
without the _\[CloseCurlyQuote]s.\n\t2. Notice the colon-equal sign combo to \
define the module.\n\t3. The new variables k1 and set1 that I am going to use \
are put in braces at the start of the Module.\n\t4. The heart of this code is \
the ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" command ContourPlot.In fact, we see that the ContourPlot is a \
thing and I have defined set1 to be that thing (using a single =).\n\t5. \
Where is the picture? When we evaluate (control-return) that bit of code, it \
looks like nothing happened. But something did happen. ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica ",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["now knows what to do when I tell it to evaluate my program for \
specific inputs. ",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.5681183184970446`*^9, 3.5681187666520443`*^9}, {
   3.5681188705020447`*^9, 3.5681188826930447`*^9}, {3.5681198575805764`*^9, 
   3.5681200050910425`*^9}, {3.5681200514320426`*^9, 3.5681201180450425`*^9}, 
   3.572190685605523*^9, 3.589531608550717*^9, {3.6340591513206863`*^9, 
   3.634059152143733*^9}, {3.634061497296154*^9, 3.6340615019293623`*^9}, 
   3.6340615406174297`*^9}],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s how it works to produce the level set of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", 
    RowBox[{
     RowBox[{"3", "xy"}], "+", 
     RowBox[{"2", "y"}]}]}], TraditionalForm]]],
 " corresponding to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"k", "=", "12"}], TraditionalForm]]],
 " ."
}], "Text",
 CellChangeTimes->{{3.564851430117283*^9, 3.5648514694137526`*^9}, {
   3.564851505247015*^9, 3.5648515526866984`*^9}, {3.5648517191545906`*^9, 
   3.5648517216973953`*^9}, {3.5648533287342176`*^9, 
   3.5648533290150185`*^9}, {3.5657754016255255`*^9, 3.565775523118539*^9}, 
   3.5681202616520424`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"levelset", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", " ", "x", " ", "y"}], "+", 
    RowBox[{"2", "y"}]}], ",", "12"}], "]"}]], "Input",
 CellChangeTimes->{{3.563575775953647*^9, 3.5635757804359035`*^9}, {
  3.5648507266114297`*^9, 3.5648507318374386`*^9}, {3.5648507747531137`*^9, 
  3.5648507789807215`*^9}, {3.564851258548182*^9, 3.5648512857702293`*^9}, {
  3.564853247130475*^9, 3.564853247489275*^9}, {3.5681201584770427`*^9, 
  3.5681201665890427`*^9}, {3.5681207671113253`*^9, 3.568120773790993*^9}, {
  3.568120946818041*^9, 3.5681209469540405`*^9}, {3.6340492155244627`*^9, 
  3.634049244258463*^9}, {3.6340591664865537`*^9, 3.634059168463667*^9}}],

Cell[BoxData[
 GraphicsBox[GraphicsComplexBox[CompressedData["
1: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
Iq/QJuLN4Wqy/uvBeQT/BUOBMNs=
   "], {{}, {}, 
    TagBox[
     TooltipBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
         19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
        36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
        70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 
        87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98}], 
       LineBox[{99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
        111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 
        125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 
        139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 
        153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 
        167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 
        181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 
        195, 196, 197, 198, 199, 200, 201, 202, 203}]},
      RowBox[{
        RowBox[{
          RowBox[{"2", " ", "y"}], "+", 
          RowBox[{"3", " ", "x", " ", "y"}]}], "\[Equal]", "12"}]],
     Annotation[#, 2 $CellContext`y + (3 $CellContext`x) $CellContext`y == 12,
       "Tooltip"]& ]}],
  AspectRatio->1,
  Axes->True,
  DisplayFunction->Identity,
  Frame->True,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{"DefaultBoundaryStyle" -> Automatic},
  PlotRange->{{-8, 8}, {-8, 8}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.02]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.563641598569533*^9, {3.5648507157538104`*^9, 3.56485073289824*^9}, 
   3.564850780041523*^9, {3.5648512726038065`*^9, 3.564851286472231*^9}, 
   3.5648532486280775`*^9, 3.564853280483333*^9, 3.565182553228906*^9, 
   3.565198147875044*^9, 3.5680659239997387`*^9, {3.5681201593650427`*^9, 
   3.5681201690300426`*^9}, {3.568120770171631*^9, 3.5681207744590597`*^9}, 
   3.5681209481710405`*^9, 3.5684789337419453`*^9, 3.5684845516743975`*^9, 
   3.56855277666667*^9, 3.5705371509454746`*^9, 3.570537798274171*^9, 
   3.5712469227293715`*^9, 3.572190427455758*^9, 3.589531513307872*^9, 
   3.617529381246727*^9, {3.6205663563942275`*^9, 3.6205663642588*^9}, {
   3.6340492164614625`*^9, 3.6340492453284626`*^9}, 3.6340574158764243`*^9, 
   3.634059170951809*^9}]
}, Open  ]],

Cell[TextData[{
 StyleBox["Notes: 1. I had to leave a space between the x and the y in the \
expression 3xy+2y. That\[CloseCurlyQuote]s because ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Mathematica",
  FontSlant->"Italic",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" considers xy without a space to be one variable called xy.\n\t2. \
It\[CloseCurlyQuote]s convenient (or lucky) that the level set comes into the \
box where x and y are both between -8 and 8. What if k were 112? or 1112? Can \
you adjust the code of the level set module to get a better picture of these \
other level sets? \n\t3. If I wanted to, I could adjust my code of the \
levelset module  so that the ranges for x and y were also inputs.",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.5681202801290426`*^9, 3.5681203291260424`*^9}, {
  3.5681206694955645`*^9, 3.5681208530209155`*^9}, {3.568120891576771*^9, 
  3.568120936357041*^9}, {3.568221888770147*^9, 3.5682220236078587`*^9}, {
  3.571247049838395*^9, 3.5712470527556*^9}, {3.572190723031664*^9, 
  3.572190725246791*^9}}],

Cell["\<\
In the second technology assignment, we will use this to discuss LaGrange\
\[CloseCurlyQuote]s method for maximization.  Here, we will practice using \
this module to get the hang of it and to get the basics of modules. \
\>", "Text",
 CellChangeTimes->{{3.6340406443627563`*^9, 3.6340407082627563`*^9}, {
  3.634040846422756*^9, 3.6340409227324257`*^9}, {3.6340592154053516`*^9, 
  3.634059229820176*^9}}],

Cell[TextData[{
 "\n",
 StyleBox["## Play a little. Is it the case that every level set for ",
  FontColor->RGBColor[0, 0, 1]],
 "f(x,y)=3xy+2y",
 StyleBox[" is a hyperbola? Explain.\n\n## Also, change the input expression \
so that the corresponding level set is a parabola. \n\n##How about two lines \
intersecting lines? Two parallel lines? The goal here is to only use one \
levelset command.\n\n## Next change the module itself. Write a module called \
levelsetwithbounds that takes as input an expression ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox["e", TraditionalForm]]],
 StyleBox[", a value ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " ",
 StyleBox["and a number ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " ",
 StyleBox["and has as output the level set of ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", "e"}], TraditionalForm]]],
 " ",
 StyleBox["corresponding to the level ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 StyleBox[" between the ranges ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "M"}], "\[LessEqual]", " ", "x"}], ",", 
    RowBox[{"y", "\[LessEqual]", " ", "M"}]}], TraditionalForm]]],
 ".",
 StyleBox[" Use your module to draw a picture of part of parabola containing \
the vertex where the vertex is more than 40 away from the origin. ",
  FontColor->RGBColor[0, 0, 1]],
 "\n",
 StyleBox["\n", "Text"]
}], "Text",
 CellChangeTimes->{{3.564851565665921*^9, 3.5648519807826505`*^9}, {
   3.564852126330906*^9, 3.5648522382143025`*^9}, {3.564852306386422*^9, 
   3.564852309163227*^9}, {3.5648523557605095`*^9, 3.564852370954936*^9}, {
   3.564852461528695*^9, 3.5648525153799896`*^9}, {3.5648525537872567`*^9, 
   3.5648525786693006`*^9}, {3.564852655749036*^9, 3.564852739287183*^9}, {
   3.5648527888328695`*^9, 3.5648528202357244`*^9}, {3.564852877160225*^9, 
   3.564853203044797*^9}, {3.56485329581816*^9, 3.564853503064524*^9}, {
   3.565183052663783*^9, 3.5651832601753483`*^9}, {3.565183425910039*^9, 
   3.565183867921215*^9}, {3.5655612172934055`*^9, 3.5655612191342087`*^9}, {
   3.5665764097843466`*^9, 3.5665764189848723`*^9}, {3.566589999054165*^9, 
   3.5665900010665684`*^9}, {3.568066444593253*^9, 3.568066636832391*^9}, {
   3.568222034221466*^9, 3.5682221018163323`*^9}, {3.568222177148641*^9, 
   3.5682223674415255`*^9}, {3.5682224134911594`*^9, 
   3.5682224152142577`*^9}, {3.568222462267949*^9, 3.5682226168427896`*^9}, {
   3.5684821780942087`*^9, 3.5684821923400235`*^9}, 3.5705378951973395`*^9, {
   3.5705379469383545`*^9, 3.570537954949957*^9}, {3.572190801088128*^9, 
   3.5721908089925804`*^9}, {3.5895317547517257`*^9, 
   3.5895317746304426`*^9}, {3.617528994194589*^9, 3.6175290276475024`*^9}, {
   3.6340407506777563`*^9, 3.6340407689877563`*^9}, {3.634041106187769*^9, 
   3.6340411086560163`*^9}, {3.6340411589650464`*^9, 
   3.6340411659717464`*^9}, {3.6340487391674623`*^9, 
   3.6340490541954627`*^9}, {3.6340490978164625`*^9, 
   3.6340491716774626`*^9}, {3.6340492577434626`*^9, 3.634049327218463*^9}, {
   3.6340498126194625`*^9, 3.6340498139074626`*^9}, {3.6340615859979095`*^9, 
   3.6340615909119186`*^9}, 3.6340622197042227`*^9, {3.6340760596310177`*^9, 
   3.6340760622674227`*^9}, {3.6493234099551544`*^9, 3.64932344782032*^9}, {
   3.6616829196963468`*^9, 3.6616829451392946`*^9}, {3.6616830435883703`*^9, 
   3.6616831104638553`*^9}, {3.6616840686980877`*^9, 3.661684079244214*^9}},
 FontSize->16]
}, Open  ]],

Cell[CellGroupData[{

Cell["Programming tools: The \
\[OpenCurlyDoubleQuote]If\[CloseCurlyDoubleQuote] command", "Section",
 CellChangeTimes->{{3.6340493789174623`*^9, 3.6340494489144626`*^9}, {
  3.6340510339804626`*^9, 3.6340510469004626`*^9}},
 TextAlignment->Center],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s an example of a module with an \
\[OpenCurlyDoubleQuote]If\[CloseCurlyDoubleQuote] command. Evaluate it. You \
will see that I\[CloseCurlyQuote]ve annotated it (that is, put comments in \
the middle of my code). ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ignores things in between (* and *)."
}], "Text",
 CellChangeTimes->{{3.6340498590714626`*^9, 3.6340498719914627`*^9}, {
  3.6340500265334625`*^9, 3.6340500406044626`*^9}, {3.6340506388624625`*^9, 
  3.6340506421344624`*^9}, {3.6340595149154825`*^9, 3.6340595176346383`*^9}, {
  3.6340595569928894`*^9, 3.6340596096228995`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"log", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "index", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"n", "\[LessEqual]", " ", "0"}], ",", 
      RowBox[{"Return", "[", "\"\<Please enter a positive number\>\"", "]"}], 
      ",", 
      RowBox[{"Return", "[", 
       RowBox[{"Log10", "[", "n", "]"}], "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"This", " ", "is", " ", "the", " ", "If", " ", 
     RowBox[{"command", ".", " ", "It"}], " ", "looks", " ", "like", " ", 
     RowBox[{"this", ":", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"___", "__"}], ",", 
         RowBox[{"___", "___"}], ",", 
         RowBox[{"___", "___"}]}], "]"}], " ", "where", " ", "the", " ", 
       "first", " ", "entry", " ", "is", " ", "a", " ", "condition", " ", 
       "and", " ", "the", " ", "second", " ", "and", " ", "third", " ", 
       "entries", " ", "are", " ", 
       RowBox[{"actions", "."}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"It", " ", "works", " ", "like", " ", 
      RowBox[{"this", ":", "\[IndentingNewLine]", 
       RowBox[{
       "If", " ", "the", " ", "condition", " ", "in", " ", "the", " ", 
        "first", " ", "entry", " ", "holds"}]}]}], ",", " ", 
     RowBox[{
     "it", " ", "does", " ", "the", " ", "thing", " ", "in", " ", "the", " ", 
      "second", " ", 
      RowBox[{"entry", ".", " ", "If"}], " ", "the", " ", "condition", " ", 
      RowBox[{"doesn", "'"}], "t", " ", "hold"}], ",", " ", 
     RowBox[{
     "it", " ", "does", " ", "the", " ", "thing", " ", "in", " ", "the", " ", 
      "third", " ", 
      RowBox[{"entry", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6340498856814623`*^9, 3.6340499635074625`*^9}, {
  3.634050044567463*^9, 3.6340501385144625`*^9}, {3.6340502634984627`*^9, 
  3.634050291944463*^9}, {3.6340503255904627`*^9, 3.634050428456463*^9}, {
  3.634050460791463*^9, 3.634050534154463*^9}, {3.6340506102034626`*^9, 
  3.634050612916463*^9}, {3.6340506499084625`*^9, 3.6340507861604624`*^9}, {
  3.6340508582774625`*^9, 3.634050864982463*^9}, {3.634051626412461*^9, 
  3.6340516271344604`*^9}, {3.6616831366243844`*^9, 3.6616831397755036`*^9}}],

Cell[TextData[StyleBox["## Try it out. Evaluate the module. Then enter and \
evaluate the following: \nlog[100]\nlog[100000]\nlog[13.4]\nlog[-6]\nExplain \
your results.",
 FontColor->RGBColor[0, 0, 1]]], "Text",
 CellChangeTimes->{{3.6340510923284626`*^9, 3.6340511424134626`*^9}, {
   3.6340616131575575`*^9, 3.6340616224239736`*^9}, {3.634076097587885*^9, 
   3.634076120504325*^9}, {3.661683170257122*^9, 3.6616832026108*^9}, {
   3.661683262545231*^9, 3.661683275524265*^9}, 3.6616843340762377`*^9}],

Cell[TextData[{
 "One last comment on the \[OpenCurlyDoubleQuote]If\[CloseCurlyDoubleQuote] \
command: we can use the If command with only two entries the first of which \
is a condition and the second is an action. In this case, if the condition \
holds, it does the action; if not, it does nothing. \n\n",
 StyleBox["## Plug some numbers in to the following module (after evaluating \
it, of course).",
  FontColor->RGBColor[0, 0, 1]]
}], "Text",
 CellChangeTimes->{{3.6340511780984626`*^9, 3.634051264967282*^9}, {
  3.6340513610828924`*^9, 3.634051400780862*^9}, {3.6340616701132574`*^9, 
  3.634061684527683*^9}, {3.6616833147109623`*^9, 3.6616833210600805`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ilikeevennumbers", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"RandomInteger", "[", "2", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "n", "]"}], ",", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Yippee!\>\"", ",", "\"\<Wonderful\>\"", ",", 
           "\"\<Fantastic\>\""}], "}"}], "[", 
         RowBox[{"[", 
          RowBox[{"a", "+", "1"}], "]"}], "]"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6340512905268373`*^9, 3.63405132525531*^9}, 
   3.634051356297414*^9, {3.6340516398234606`*^9, 3.634051702452461*^9}, {
   3.634051785664461*^9, 3.6340517868544607`*^9}, {3.63405985562597*^9, 
   3.634059866704604*^9}, {3.63405992013866*^9, 3.6340599253719597`*^9}, {
   3.6340600558164206`*^9, 3.6340601673518*^9}}],

Cell[TextData[StyleBox["Explain what the module does.",
 FontColor->RGBColor[0, 0, 1]]], "Text",
 CellChangeTimes->{{3.6616833493737183`*^9, 3.661683365644309*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Programming Tools: Loops", "Section",
 CellChangeTimes->{{3.634051521103893*^9, 3.6340515279045725`*^9}},
 TextAlignment->Center],

Cell["\<\
Here is a Module with a loop. We will use the \[OpenCurlyDoubleQuote]While\
\[CloseCurlyDoubleQuote] command to make our loop. We could also us the \
\[OpenCurlyDoubleQuote]For\[CloseCurlyDoubleQuote] command. A bit of it is \
copied from a module I\[CloseCurlyQuote]ve already written. Evaluate the \
module.\
\>", "Text",
 CellChangeTimes->{{3.634051537728555*^9, 3.6340516138614607`*^9}, {
  3.634051729214461*^9, 3.6340517471254606`*^9}, {3.634052201208461*^9, 
  3.634052209056461*^9}, {3.6340602834904428`*^9, 3.634060308881895*^9}, {
  3.6340617225917497`*^9, 3.6340617309689646`*^9}, {3.6616834708493605`*^9, 
  3.6616834754357014`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sumofsquares", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"index", ",", "sum"}], "}"}], ",", 
    RowBox[{
     RowBox[{"index", "=", "1"}], ";", 
     RowBox[{"sum", "=", "0"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"Or", "[", 
        RowBox[{
         RowBox[{"n", "\[LessEqual]", " ", "0"}], ",", 
         RowBox[{
          RowBox[{"IntegerQ", "[", "n", "]"}], "\[Equal]", "False"}]}], "]"}],
        ",", 
       RowBox[{
       "Return", "[", "\"\<Please enter a positive integer\>\"", "]"}]}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"index", "\[LessEqual]", "n"}], ",", 
       RowBox[{
        RowBox[{"sum", "=", 
         RowBox[{"sum", "+", 
          RowBox[{"index", "^", "2"}]}]}], ";", 
        RowBox[{"index", "=", 
         RowBox[{"index", "+", "1"}]}]}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "sum", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6340517573684607`*^9, 3.634051976169461*^9}, {
  3.634052029714461*^9, 3.634052036853461*^9}, {3.6340521357054605`*^9, 
  3.634052174780461*^9}, {3.6340522209014606`*^9, 3.6340522224994607`*^9}, {
  3.634053130754461*^9, 3.6340531318414607`*^9}}],

Cell["\<\
Plug in some numbers, some positive, some negative. Do you see what it\
\[CloseCurlyQuote]s doing?\
\>", "Text",
 CellChangeTimes->{{3.634052303016461*^9, 3.6340523357824607`*^9}, {
  3.661683487494347*^9, 3.6616834965890303`*^9}}],

Cell[BoxData[
 RowBox[{"sumofsquares", "[", "41", "]"}]], "Input",
 CellChangeTimes->{{3.634051979508461*^9, 3.634051985529461*^9}, {
  3.634052056780461*^9, 3.634052056980461*^9}, {3.634052093898461*^9, 
  3.6340520985384607`*^9}, {3.6340521475404606`*^9, 3.6340521493414607`*^9}, {
  3.634052229010461*^9, 3.6340522491434608`*^9}, {3.634076228006114*^9, 
  3.6340762585821676`*^9}}],

Cell["\<\
If you\[CloseCurlyQuote]re unfamiliar with the concept of a loop, it can be a \
tough concept to get a handle on. Let\[CloseCurlyQuote]s go through this \
module slowly. Let\[CloseCurlyQuote]s start with the While command which is \
written:

\t\tWhile[index\[LessEqual]n,sum=sum+index^2;index=index+1].

In general, it looks like this: While[---------, \
-----------;---------;--------------------; .... ]. The punctuation: a comma \
at the beginning, then things separated by semicolons. The first thing is a \
condition that might be true or false, the others are steps to take.

Our condition is about the quantity called \[OpenCurlyDoubleQuote]index\
\[CloseCurlyDoubleQuote]. Our first condition asks whether index is \
\[LessEqual] the number that was entered.

If it is, our module adds the square of the index to the quantity called \
\[OpenCurlyDoubleQuote]sum\[CloseCurlyDoubleQuote]. Then, it increases the \
index by 1.

After this, it reruns the While command with the new increased index. 

Lets plug in the number 3. Evaluate the following.\
\>", "Text",
 CellChangeTimes->{{3.634052283185461*^9, 3.634052294409461*^9}, {
   3.634052347789461*^9, 3.6340528003154607`*^9}, 3.6340603911916027`*^9, {
   3.6340617573018103`*^9, 3.6340617589242134`*^9}, {3.661683459133911*^9, 
   3.6616834610526857`*^9}, {3.6616835015341673`*^9, 3.6616835054497166`*^9}}],

Cell[BoxData[
 RowBox[{"sumofsquares", "[", "3", "]"}]], "Input",
 CellChangeTimes->{{3.6340528047174606`*^9, 3.6340528088744607`*^9}}],

Cell[TextData[{
 "We did and we got the number 14. At one level, this is because 1^2 + 2^2 + \
3^2 = 14. But let\[CloseCurlyQuote]s see how our module figured that out.\n\n\
Here\[CloseCurlyQuote]s a schematic for what the module did. The Module is \
written in orange; the thoughts and actions of the computer are in purple.\n\n\
",
 StyleBox["sumofsquares[n_]:=Module[{index,sum},index=1;sum=0;\n\n",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["\tThe human gave me the number n=3.\n\tI\[CloseCurlyQuote]ll set \
index=1 and sum=0",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["\n\nIf[Or[n\[LessEqual] 0,IntegerQ[n]\[Equal]False],Return[\
\[OpenCurlyDoubleQuote]Please enter a positive \
integer\[CloseCurlyDoubleQuote]]];\n\n\t",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["I will check to see if either IntegerQ[3] is False or whether 3",
  FontColor->RGBColor[0.5, 0, 0.5]],
 "\[LessEqual]",
 StyleBox[" 0. Since neither of these hold, I\[CloseCurlyQuote]ll move onto \
the next step",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["\n\nWhile[index\[LessEqual]n,sum=sum+index^2;index=index+1];\n\n\t",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["\tSince the index =1 ",
  FontColor->RGBColor[0.5, 0, 0.5]],
 Cell[BoxData[
  FormBox[
   RowBox[{"\[LessEqual]", " "}], TraditionalForm]],
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox[" 3, I\[CloseCurlyQuote]ll perform the following steps:\n\t\t\t\
sum=sum+index^2.  So, sum =0+1^2. So sum=1.\n\t\t\tNext, index=index+1. So \
index = 1+1. So index =2.\n\n\tNow I\[CloseCurlyQuote]ll redo the While \
command:\n\n\t\tSince the index =2 \[LessEqual]  3, I\[CloseCurlyQuote]ll \
perform the following steps:\n\t\t\tsum=sum+index^2.  So, sum =1+2^2. So \
sum=5\n\t\t\tindex=index+1. So index = 2+1. So index =3.\n\n\tNow I\
\[CloseCurlyQuote]ll redo the While command:\n\n\t\tSince the index =3 \
\[LessEqual]  3, I\[CloseCurlyQuote]ll perform the following steps:\n\t\t\t\
sum=sum+index^2.  So, sum =5+3^2. So sum=14\n\t\t\tindex=index+1. So index = \
3+1. So index =4.\n\n\tNow I\[CloseCurlyQuote]ll redo the While command:\n\n\t\
\tSince the index=4 > 3, I ",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["won\[CloseCurlyQuote]t",
  FontSlant->"Italic",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox[" perform the following steps.",
  FontColor->RGBColor[0.5, 0, 0.5]],
 StyleBox["\n\nReturn[sum]] \n\n",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["\tI\[CloseCurlyQuote]ll tell the human what the sum is at this \
point. \[OpenCurlyDoubleQuote]Hey human, sum=14\[CloseCurlyDoubleQuote].",
  FontColor->RGBColor[0.5, 0, 0.5]]
}], "Text",
 CellChangeTimes->{{3.6340528150944605`*^9, 3.6340531211114607`*^9}, {
   3.634053160761461*^9, 3.634053311857169*^9}, {3.6340533969876814`*^9, 
   3.6340536123864594`*^9}, {3.6340536662994595`*^9, 3.634053684748459*^9}, 
   3.634060378005849*^9, {3.6340604294587917`*^9, 3.6340604546622334`*^9}, {
   3.6340605236471786`*^9, 3.634060551687783*^9}, 3.634062246957471*^9, {
   3.63407639692321*^9, 3.6340763991696143`*^9}, {3.6493237442992773`*^9, 
   3.6493237523217363`*^9}}],

Cell[TextData[{
 StyleBox["## Your turn. Write a module that takes as input a positive \
integer ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox["m", TraditionalForm]]],
 " ",
 StyleBox["prints the first ",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FormBox["m", TraditionalForm]]],
 StyleBox[" odd numbers and returns the square root of the sum of the numbers \
it printed. You should use the Print command in the module. Look it up in the \
Wolfram Documentation center available under the Help tab. ",
  FontColor->RGBColor[0, 0, 1]],
 " "
}], "Text",
 CellChangeTimes->{{3.5705380779505763`*^9, 3.570538135048218*^9}, {
  3.589531870074196*^9, 3.5895318708832135`*^9}, {3.6340539144384594`*^9, 
  3.634053959878459*^9}, {3.6340539956904593`*^9, 3.634054125513459*^9}, {
  3.6340574446360693`*^9, 3.6340574480472646`*^9}, {3.634060588227873*^9, 
  3.6340606510174637`*^9}, {3.6340740897909575`*^9, 3.634074091818961*^9}, {
  3.6493238540565557`*^9, 3.649323858014782*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Your assignment\nProblems",
 FontSize->24]], "Section",
 CellChangeTimes->{{3.6175279378411694`*^9, 3.6175279396452723`*^9}, 
   3.617530196874378*^9, {3.617538058494877*^9, 3.61753806921749*^9}},
 TextAlignment->Center],

Cell[TextData[StyleBox["General instructions:",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.617618710135756*^9, 3.6176187156680727`*^9}}],

Cell[TextData[{
 "A. Copy the Your Assignment section into a new ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook.\nB. Copy the levelset module into the new notebook. Here it is \
for your convenience:\n"
}], "Text",
 CellChangeTimes->{{3.617537894921521*^9, 3.617537997918412*^9}, {
   3.6176185660775166`*^9, 3.617618686972431*^9}, 3.6176187223664556`*^9, {
   3.629466768926526*^9, 3.6294668232895536`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"levelset", "[", 
   RowBox[{"e_", ",", "k_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"k1", ",", "set1"}], "}"}], ",", 
    RowBox[{
     RowBox[{"k1", "=", "k"}], ";", 
     RowBox[{"set1", "=", 
      RowBox[{"ContourPlot", "[", 
       RowBox[{
        RowBox[{"e", "\[Equal]", "k1"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", 
          RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"y", ",", 
          RowBox[{"-", "8"}], ",", "8"}], "}"}], ",", 
        RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}], ";", 
     RowBox[{"Return", "[", "set1", "]"}]}]}], "]"}]}]], "Input"],

Cell["\<\
C. Place the answer to a question right after it. 
D. Remember to use alt + 7 to format cells in which you will be typing text. \
You don' t need to format cells in which you will be writing Mathematica code.
   \
\>", "Text",
 CellChangeTimes->{{3.6294668277826967`*^9, 3.629466853049371*^9}}],

Cell[TextData[{
 StyleBox["To submit\n",
  FontWeight->"Bold"],
 "E. Save the notebook as ",
 StyleBox["yourname_assignment 1.nb",
  FontSlant->"Italic"],
 "\nF. Evaluate entire notebook.\nG. Save as a .pdf file.\nH. Submit to \
Canvas These are due on Friday, March 11.\n"
}], "Text",
 CellChangeTimes->{{3.6176187276907597`*^9, 3.617618782321885*^9}, {
   3.6294668595779376`*^9, 3.6294668756411743`*^9}, 3.634057871525486*^9, {
   3.661685368417894*^9, 3.6616853801952143`*^9}}],

Cell[TextData[StyleBox["## In new cells, experiment by typing and evaluating \
the following:\n\n        A. Solve[2x=7]\n        B. a=9; Solve[2x==a] (that\
\[CloseCurlyQuote]s a semicolon in there)\n        C. a=9 [Return] \
Solve[2x==a] (the carriage return is not Shift+Return).\n        \nSum up \
what you have deduced about semi-colons, the Solve command, and use of equal \
signs. In particular, what\[CloseCurlyQuote]s the difference between B and C?",
 FontColor->GrayLevel[0]]], "Text",
 CellChangeTimes->{
  3.6340581414479246`*^9, {3.6340742660244675`*^9, 3.6340742975677223`*^9}, {
   3.661683700395172*^9, 3.66168370176784*^9}, {3.6616837393758235`*^9, 
   3.661683793190648*^9}}],

Cell["\<\
## In new cells, experiment with this by typing and evaluating the following:

      C. Solve [3x==y]
      D. Solve[3x==y,{x}].

Sum up what you have deduced about the Solve command and solving for \
particular variables.\
\>", "Text",
 CellChangeTimes->{3.634058124423951*^9, 3.661683862416792*^9},
 FontColor->GrayLevel[0]],

Cell[TextData[{
 StyleBox["\n",
  FontColor->GrayLevel[0]],
 "## What are the pros and cons of using NSolve instead of Solve?"
}], "Text",
 CellChangeTimes->{{3.6175279437075047`*^9, 3.6175279757043347`*^9}, {
  3.6175282833869333`*^9, 3.617528285817072*^9}, {3.617528811305128*^9, 
  3.617528811454137*^9}, {3.617528848274243*^9, 3.617528848959282*^9}, {
  3.620566505060416*^9, 3.6205665091318235`*^9}, {3.6340580900109825`*^9, 
  3.6340580932771697`*^9}, {3.634058327777582*^9, 3.634058346720666*^9}, {
  3.634058727095422*^9, 3.634058734456843*^9}, {3.661683894752482*^9, 
  3.6616839059834023`*^9}},
 FontColor->GrayLevel[0]],

Cell[TextData[{
 StyleBox["## Play around with the ContourPlot command:",
  FontColor->GrayLevel[0]],
 StyleBox[" use ContourPlot to draw a parabola, a hyperbola, a line, and a \
cubic, some with and some without axes. ",
  FontWeight->"Plain",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{3.634058730189599*^9, 3.634075618567443*^9},
 FontColor->GrayLevel[0]],

Cell[TextData[{
 "## Change the bounds on\n\n",
 Cell[BoxData[
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"ContourPlot", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "1"}], ")"}], "2"], "+", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"y", "-", "7"}], ")"}], "2"]}], "\[Equal]", "10"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "3"}], ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", "12"}], "}"}], ",", 
      RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}], ",", 
    RowBox[{"ContourPlot", "[", 
     RowBox[{
      RowBox[{"y", "==", 
       RowBox[{
        RowBox[{"3", 
         SuperscriptBox["x", "2"]}], "+", "1"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", 
        RowBox[{"-", "3"}], ",", "5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"y", ",", "0", ",", "12"}], "}"}], ",", 
      RowBox[{"Axes", "\[Rule]", "True"}]}], "]"}]}], "]"}]],
  CellChangeTimes->{{3.631533874040453*^9, 3.63153387831487*^9}, {
   3.6315339288632765`*^9, 3.6315339667555656`*^9}}],
 "\n\nso that the circle comes out looking circular. (You\[CloseCurlyQuote]ll \
need to cut-and-paste it into a cell that isn\[CloseCurlyQuote]t formatted \
for text.) Briefly sum up what you think is happening."
}], "Text",
 CellChangeTimes->{
  3.6340584822504177`*^9, {3.634058522441716*^9, 3.634058640460467*^9}, 
   3.63405873999916*^9, {3.6340758737868915`*^9, 3.6340758929905252`*^9}, {
   3.6340759279189863`*^9, 3.634075931631793*^9}},
 FontColor->GrayLevel[0]],

Cell[TextData[{
 "## Get ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " to draw a picture of a parabola and a line tangent to the parabola at some \
point other than the vertex. If you want to show off, include a (visible) \
point of tangency in your picture. (You may need to look up the command \
\[OpenCurlyDoubleQuote]Point\[CloseCurlyDoubleQuote] in the documentation \
under the Help tab.)\n"
}], "Text",
 CellChangeTimes->{
  3.6340587101324515`*^9, {3.6340759130521603`*^9, 3.634075913925762*^9}, {
   3.661684020355857*^9, 3.661684025987204*^9}},
 FontColor->GrayLevel[0]],

Cell[TextData[{
 "\n## Play a little. Is it the case that every level set for f(x,y)=3xy+2y \
is a hyperbola? Explain.\n\n## Change the input expression so that the \
corresponding level set is a parabola. \n\n## How about two lines \
intersecting lines? Two parallel lines? The goal here is to only use one \
levelset command.\n\n## Next change the module itself. Write a module called \
levelsetwithbounds that takes as input an expression ",
 Cell[BoxData[
  FormBox["e", TraditionalForm]]],
 ", a value ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " and a number ",
 Cell[BoxData[
  FormBox["M", TraditionalForm]]],
 " and has as output the level set of ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"f", "(", 
     RowBox[{"x", ",", "y"}], ")"}], "=", "e"}], TraditionalForm]]],
 " corresponding to the level ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " between the ranges ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{"-", "M"}], "\[LessEqual]", " ", "x"}], ",", 
    RowBox[{"y", "\[LessEqual]", " ", "M"}]}], TraditionalForm]]],
 ". (Our levelset module only draws the picture where M=8.) Use your module \
to draw a picture of part of parabola containing the vertex where the vertex \
is more than 40 away from the origin. \n"
}], "Text",
 CellChangeTimes->{{3.564851565665921*^9, 3.5648519807826505`*^9}, {
   3.564852126330906*^9, 3.5648522382143025`*^9}, {3.564852306386422*^9, 
   3.564852309163227*^9}, {3.5648523557605095`*^9, 3.564852370954936*^9}, {
   3.564852461528695*^9, 3.5648525153799896`*^9}, {3.5648525537872567`*^9, 
   3.5648525786693006`*^9}, {3.564852655749036*^9, 3.564852739287183*^9}, {
   3.5648527888328695`*^9, 3.5648528202357244`*^9}, {3.564852877160225*^9, 
   3.564853203044797*^9}, {3.56485329581816*^9, 3.564853503064524*^9}, {
   3.565183052663783*^9, 3.5651832601753483`*^9}, {3.565183425910039*^9, 
   3.565183867921215*^9}, {3.5655612172934055`*^9, 3.5655612191342087`*^9}, {
   3.5665764097843466`*^9, 3.5665764189848723`*^9}, {3.566589999054165*^9, 
   3.5665900010665684`*^9}, {3.568066444593253*^9, 3.568066636832391*^9}, {
   3.568222034221466*^9, 3.5682221018163323`*^9}, {3.568222177148641*^9, 
   3.5682223674415255`*^9}, {3.5682224134911594`*^9, 
   3.5682224152142577`*^9}, {3.568222462267949*^9, 3.5682226168427896`*^9}, {
   3.5684821780942087`*^9, 3.5684821923400235`*^9}, 3.5705378951973395`*^9, {
   3.5705379469383545`*^9, 3.570537954949957*^9}, {3.572190801088128*^9, 
   3.5721908089925804`*^9}, {3.5895317547517257`*^9, 
   3.5895317746304426`*^9}, {3.617528994194589*^9, 3.6175290276475024`*^9}, {
   3.6340407506777563`*^9, 3.6340407689877563`*^9}, {3.634041106187769*^9, 
   3.6340411086560163`*^9}, {3.6340411589650464`*^9, 
   3.6340411659717464`*^9}, {3.6340487391674623`*^9, 
   3.6340490541954627`*^9}, {3.6340490978164625`*^9, 
   3.6340491716774626`*^9}, {3.6340492577434626`*^9, 3.634049327218463*^9}, {
   3.6340498126194625`*^9, 3.6340498139074626`*^9}, {3.6340615859979095`*^9, 
   3.6340615909119186`*^9}, 3.6340622197042227`*^9, {3.6340760596310177`*^9, 
   3.6340760622674227`*^9}, {3.6493234099551544`*^9, 3.64932344782032*^9}, {
   3.6616829196963468`*^9, 3.6616829451392946`*^9}, {3.6616830435883703`*^9, 
   3.6616831104638553`*^9}, {3.6616840686980877`*^9, 3.661684116042963*^9}, {
   3.6616841766150446`*^9, 3.6616841801872845`*^9}, 3.6616842508367724`*^9},
 FontSize->16,
 FontColor->GrayLevel[0]],

Cell["\<\
For the next question, you need the following module. Be sure to evaluate it.\
\>", "Text",
 CellChangeTimes->{{3.6616842724890175`*^9, 3.6616842922381105`*^9}},
 FontColor->GrayLevel[0]],

Cell[BoxData[
 RowBox[{
  RowBox[{"log", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "index", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"n", "\[LessEqual]", " ", "0"}], ",", 
      RowBox[{"Return", "[", "\"\<Please enter a positive number\>\"", "]"}], 
      ",", 
      RowBox[{"Return", "[", 
       RowBox[{"Log10", "[", "n", "]"}], "]"}]}], "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"This", " ", "is", " ", "the", " ", "If", " ", 
     RowBox[{"command", ".", " ", "It"}], " ", "looks", " ", "like", " ", 
     RowBox[{"this", ":", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"___", "__"}], ",", 
         RowBox[{"___", "___"}], ",", 
         RowBox[{"___", "___"}]}], "]"}], " ", "where", " ", "the", " ", 
       "first", " ", "entry", " ", "is", " ", "a", " ", "condition", " ", 
       "and", " ", "the", " ", "second", " ", "and", " ", "third", " ", 
       "entries", " ", "are", " ", 
       RowBox[{"actions", "."}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{"It", " ", "works", " ", "like", " ", 
      RowBox[{"this", ":", "\[IndentingNewLine]", 
       RowBox[{
       "If", " ", "the", " ", "condition", " ", "in", " ", "the", " ", 
        "first", " ", "entry", " ", "holds"}]}]}], ",", " ", 
     RowBox[{
     "it", " ", "does", " ", "the", " ", "thing", " ", "in", " ", "the", " ", 
      "second", " ", 
      RowBox[{"entry", ".", " ", "If"}], " ", "the", " ", "condition", " ", 
      RowBox[{"doesn", "'"}], "t", " ", "hold"}], ",", " ", 
     RowBox[{
     "it", " ", "does", " ", "the", " ", "thing", " ", "in", " ", "the", " ", 
      "third", " ", 
      RowBox[{"entry", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6340498856814623`*^9, 3.6340499635074625`*^9}, {
  3.634050044567463*^9, 3.6340501385144625`*^9}, {3.6340502634984627`*^9, 
  3.634050291944463*^9}, {3.6340503255904627`*^9, 3.634050428456463*^9}, {
  3.634050460791463*^9, 3.634050534154463*^9}, {3.6340506102034626`*^9, 
  3.634050612916463*^9}, {3.6340506499084625`*^9, 3.6340507861604624`*^9}, {
  3.6340508582774625`*^9, 3.634050864982463*^9}, {3.634051626412461*^9, 
  3.6340516271344604`*^9}, {3.6616831366243844`*^9, 3.6616831397755036`*^9}},
 FontColor->GrayLevel[0]],

Cell["\<\
## Evaluate the module. Then enter and evaluate the following: 
log[100]
log[100000]
log[13.4]
log[-6]
Explain your results.\
\>", "Text",
 CellChangeTimes->{{3.6340510923284626`*^9, 3.6340511424134626`*^9}, {
  3.6340616131575575`*^9, 3.6340616224239736`*^9}, {3.634076097587885*^9, 
  3.634076120504325*^9}, {3.661683170257122*^9, 3.6616832026108*^9}, {
  3.661683262545231*^9, 3.661683275524265*^9}, {3.661684303235829*^9, 
  3.6616843159027042`*^9}},
 FontColor->GrayLevel[0]],

Cell["\<\
## Plug a bunch of different kinds of numbers into the module below (after \
evaluating it).\
\>", "Text",
 CellChangeTimes->{{3.6616847684783816`*^9, 3.6616848050524087`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ilikeevennumbers", "[", "n_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"RandomInteger", "[", "2", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"EvenQ", "[", "n", "]"}], ",", 
       RowBox[{"Return", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<Yippee!\>\"", ",", "\"\<Wonderful\>\"", ",", 
           "\"\<Fantastic\>\""}], "}"}], "[", 
         RowBox[{"[", 
          RowBox[{"a", "+", "1"}], "]"}], "]"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6340512905268373`*^9, 3.63405132525531*^9}, 
   3.634051356297414*^9, {3.6340516398234606`*^9, 3.634051702452461*^9}, {
   3.634051785664461*^9, 3.6340517868544607`*^9}, {3.63405985562597*^9, 
   3.634059866704604*^9}, {3.63405992013866*^9, 3.6340599253719597`*^9}, {
   3.6340600558164206`*^9, 3.6340601673518*^9}},
 FontColor->GrayLevel[0]],

Cell["Explain what the module does.", "Text",
 CellChangeTimes->{{3.6616833493737183`*^9, 3.661683365644309*^9}},
 FontColor->GrayLevel[0]],

Cell[TextData[{
 StyleBox["##  Write a module that takes as input a positive integer ",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox["m", TraditionalForm]],
  FontColor->GrayLevel[0]],
 StyleBox[" prints the first ",
  FontColor->GrayLevel[0]],
 Cell[BoxData[
  FormBox["m", TraditionalForm]],
  FontColor->GrayLevel[0]],
 StyleBox[" positive odd numbers and returns the square root of the sum of \
the numbers it printed. You should use the Print command in the module. Look \
it up in the Wolfram Documentation center available under the Help tab.  Run \
your module for 3 different numbers between 20 and 50. Do you have any \
thoughts about the output?",
  FontColor->GrayLevel[0]]
}], "Text",
 CellChangeTimes->{{3.6340606875525537`*^9, 3.634060709116787*^9}, {
  3.634074010386818*^9, 3.6340740129452224`*^9}, {3.634074106560987*^9, 
  3.6340741715975013`*^9}, {3.634075329420935*^9, 3.634075331121338*^9}, {
  3.6493238703234863`*^9, 3.6493238746227317`*^9}, {3.6616846444007664`*^9, 
  3.6616846548837647`*^9}, {3.6616848387566614`*^9, 3.661684839115383*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1280, 942},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
FrontEndVersion->"10.0 for Microsoft Windows (32-bit) (July 1, 2014)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 473, 9, 153, "Subtitle"],
Cell[1055, 33, 1727, 32, 220, "Text"],
Cell[CellGroupData[{
Cell[2807, 69, 129, 2, 70, "Section"],
Cell[2939, 73, 713, 12, 49, "Text"],
Cell[3655, 87, 278, 6, 31, "Input"],
Cell[3936, 95, 2896, 59, 498, "Text"],
Cell[6835, 156, 175, 4, 30, "Text"],
Cell[7013, 162, 178, 4, 31, "Input"],
Cell[7194, 168, 260, 5, 30, "Text"],
Cell[7457, 175, 177, 4, 33, "Input"],
Cell[7637, 181, 182, 4, 33, "Input"],
Cell[7822, 187, 1524, 45, 159, "Text"],
Cell[9349, 234, 1277, 35, 126, "Text"],
Cell[10629, 271, 1513, 46, 178, "Text"],
Cell[12145, 319, 208, 4, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12390, 328, 126, 2, 70, "Section"],
Cell[12519, 332, 471, 10, 49, "Text"],
Cell[CellGroupData[{
Cell[13015, 346, 618, 18, 31, "Input"],
Cell[13636, 366, 4812, 89, 375, "Output"]
}, Open  ]],
Cell[18463, 458, 1042, 23, 89, "Text"],
Cell[19508, 483, 388, 9, 49, "Text"],
Cell[19899, 494, 385, 8, 49, "Text"],
Cell[CellGroupData[{
Cell[20309, 506, 1086, 32, 33, "Input"],
Cell[21398, 540, 10937, 192, 376, "Output"]
}, Open  ]],
Cell[32350, 735, 990, 17, 125, "Text"],
Cell[33343, 754, 105, 1, 30, "Text"],
Cell[CellGroupData[{
Cell[33473, 759, 485, 15, 31, "Input"],
Cell[33961, 776, 122390, 2060, 375, 97450, 1650, "CachedBoxData", "BoxData", \
"Output"]
}, Open  ]],
Cell[156366, 2839, 281, 5, 30, "Text"],
Cell[156650, 2846, 524, 16, 31, "Input"],
Cell[157177, 2864, 419, 14, 31, "Input"],
Cell[157599, 2880, 712, 15, 68, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158348, 2900, 187, 3, 70, "Section"],
Cell[158538, 2905, 769, 20, 49, "Text"],
Cell[159310, 2927, 1100, 29, 31, "Input"],
Cell[160413, 2958, 1540, 29, 144, "Text"],
Cell[161956, 2989, 703, 20, 30, "Text"],
Cell[CellGroupData[{
Cell[162684, 3013, 686, 12, 31, "Input"],
Cell[163373, 3027, 6042, 108, 375, "Output"]
}, Open  ]],
Cell[169430, 3138, 1079, 19, 87, "Text"],
Cell[170512, 3159, 416, 7, 49, "Text"],
Cell[170931, 3168, 3674, 78, 263, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[174642, 3251, 248, 4, 70, "Section"],
Cell[174893, 3257, 637, 12, 49, "Text"],
Cell[175533, 3271, 2408, 51, 172, "Input"],
Cell[177944, 3324, 504, 7, 125, "Text"],
Cell[178451, 3333, 668, 11, 87, "Text"],
Cell[179122, 3346, 1029, 25, 72, "Input"],
Cell[180154, 3373, 164, 2, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[180355, 3380, 135, 2, 70, "Section"],
Cell[180493, 3384, 655, 11, 49, "Text"],
Cell[181151, 3397, 1342, 34, 92, "Input"],
Cell[182496, 3433, 241, 5, 30, "Text"],
Cell[182740, 3440, 384, 6, 31, "Input"],
Cell[183127, 3448, 1378, 28, 277, "Text"],
Cell[184508, 3478, 135, 2, 31, "Input"],
Cell[184646, 3482, 3072, 58, 733, "Text"],
Cell[187721, 3542, 995, 22, 49, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[188753, 3569, 244, 4, 101, "Section"],
Cell[189000, 3575, 146, 2, 30, "Text"],
Cell[189149, 3579, 425, 9, 68, "Text"],
Cell[189577, 3590, 711, 21, 31, "Input"],
Cell[190291, 3613, 304, 6, 68, "Text"],
Cell[190598, 3621, 481, 11, 125, "Text"],
Cell[191082, 3634, 694, 10, 144, "Text"],
Cell[191779, 3646, 336, 10, 125, "Text"],
Cell[192118, 3658, 630, 12, 49, "Text"],
Cell[192751, 3672, 373, 9, 30, "Text"],
Cell[193127, 3683, 1630, 43, 123, "Text"],
Cell[194760, 3728, 589, 13, 68, "Text"],
Cell[195352, 3743, 3432, 65, 246, "Text"],
Cell[198787, 3810, 197, 4, 30, "Text"],
Cell[198987, 3816, 2434, 52, 172, "Input"],
Cell[201424, 3870, 490, 13, 125, "Text"],
Cell[201917, 3885, 186, 4, 30, "Text"],
Cell[202106, 3891, 1055, 26, 72, "Input"],
Cell[203164, 3919, 139, 2, 30, "Text"],
Cell[203306, 3923, 1075, 22, 68, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
